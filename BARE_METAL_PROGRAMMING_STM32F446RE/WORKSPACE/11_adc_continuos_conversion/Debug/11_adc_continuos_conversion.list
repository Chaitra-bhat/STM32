
11_adc_continuos_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000138c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800155c  0800155c  0001155c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001610  08001610  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001610  08001610  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001610  08001610  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001610  08001610  00011610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001614  08001614  00011614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000064  0800167c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  0800167c  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036fd  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000980  00000000  00000000  00023791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00024118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000130  00000000  00000000  000242a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad17  00000000  00000000  000243d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021ab  00000000  00000000  0003f0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090694  00000000  00000000  00041292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1926  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c6c  00000000  00000000  000d197c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001544 	.word	0x08001544

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001544 	.word	0x08001544

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <adc_init>:
#define ADC1ENA		(1U<<8)



void adc_init()
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	//Enable clock for GPIOA
	RCC->AHB1ENR |= GPIOAENA;
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <adc_init+0x4c>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a10      	ldr	r2, [pc, #64]	; (80002fc <adc_init+0x4c>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PA1 pin as analog pin
	GPIOA->MODER |= (3U<<2);
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <adc_init+0x50>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <adc_init+0x50>)
 80002c6:	f043 030c 	orr.w	r3, r3, #12
 80002ca:	6013      	str	r3, [r2, #0]

	// Enable cock access for ADC 1
	RCC->APB2ENR |= ADC1ENA;
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <adc_init+0x4c>)
 80002ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002d0:	4a0a      	ldr	r2, [pc, #40]	; (80002fc <adc_init+0x4c>)
 80002d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d6:	6453      	str	r3, [r2, #68]	; 0x44

	//Configure the ADC peripheral
	//1. Conversion sequence start
	ADC1->SQR3 = (1U<<0);
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <adc_init+0x54>)
 80002da:	2201      	movs	r2, #1
 80002dc:	635a      	str	r2, [r3, #52]	; 0x34
	//2. Conversion sequence length
	ADC1->SQR1 = 0;
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <adc_init+0x54>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	62da      	str	r2, [r3, #44]	; 0x2c

	//3. ADC enable
	ADC1->CR2 |= (1U<<0);
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <adc_init+0x54>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a06      	ldr	r2, [pc, #24]	; (8000304 <adc_init+0x54>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6093      	str	r3, [r2, #8]

}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40023800 	.word	0x40023800
 8000300:	40020000 	.word	0x40020000
 8000304:	40012000 	.word	0x40012000

08000308 <start_conversion>:

void start_conversion()
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	// enable continuos conversion
	ADC1->CR2 |= (1U<<1);
 800030c:	4b08      	ldr	r3, [pc, #32]	; (8000330 <start_conversion+0x28>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	4a07      	ldr	r2, [pc, #28]	; (8000330 <start_conversion+0x28>)
 8000312:	f043 0302 	orr.w	r3, r3, #2
 8000316:	6093      	str	r3, [r2, #8]

	//start conversion
	ADC1->CR2 |= (1U<<30);
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <start_conversion+0x28>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <start_conversion+0x28>)
 800031e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000322:	6093      	str	r3, [r2, #8]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40012000 	.word	0x40012000

08000334 <adc_read>:


int adc_read()
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
	//check the conversion complete flag
	while(!(ADC1->SR & (1U<<1)));
 8000338:	bf00      	nop
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <adc_read+0x20>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0302 	and.w	r3, r3, #2
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f9      	beq.n	800033a <adc_read+0x6>

	return ADC1->DR;
 8000346:	4b03      	ldr	r3, [pc, #12]	; (8000354 <adc_read+0x20>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c


}
 800034a:	4618      	mov	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	40012000 	.word	0x40012000

08000358 <main>:
#include<stdio.h>
#include<stm32f4xx.h>
int sensor_value;

int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	adc_init();
 800035c:	f7ff ffa8 	bl	80002b0 <adc_init>
	usart2_txRx_init();
 8000360:	f000 f8c2 	bl	80004e8 <usart2_txRx_init>
	start_conversion();
 8000364:	f7ff ffd0 	bl	8000308 <start_conversion>

	while(1)
	{

		sensor_value = adc_read();
 8000368:	f7ff ffe4 	bl	8000334 <adc_read>
 800036c:	4603      	mov	r3, r0
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <main+0x28>)
 8000370:	6013      	str	r3, [r2, #0]
		printf("ADC conversion value: %d \n\r", sensor_value);
 8000372:	4b03      	ldr	r3, [pc, #12]	; (8000380 <main+0x28>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4619      	mov	r1, r3
 8000378:	4802      	ldr	r0, [pc, #8]	; (8000384 <main+0x2c>)
 800037a:	f000 f98d 	bl	8000698 <iprintf>
		sensor_value = adc_read();
 800037e:	e7f3      	b.n	8000368 <main+0x10>
 8000380:	2000008c 	.word	0x2000008c
 8000384:	0800155c 	.word	0x0800155c

08000388 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
 8000398:	e00a      	b.n	80003b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800039a:	f3af 8000 	nop.w
 800039e:	4601      	mov	r1, r0
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	1c5a      	adds	r2, r3, #1
 80003a4:	60ba      	str	r2, [r7, #8]
 80003a6:	b2ca      	uxtb	r2, r1
 80003a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	3301      	adds	r3, #1
 80003ae:	617b      	str	r3, [r7, #20]
 80003b0:	697a      	ldr	r2, [r7, #20]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	dbf0      	blt.n	800039a <_read+0x12>
	}

return len;
 80003b8:	687b      	ldr	r3, [r7, #4]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3718      	adds	r7, #24
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b086      	sub	sp, #24
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	60f8      	str	r0, [r7, #12]
 80003ca:	60b9      	str	r1, [r7, #8]
 80003cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
 80003d2:	e009      	b.n	80003e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	1c5a      	adds	r2, r3, #1
 80003d8:	60ba      	str	r2, [r7, #8]
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 f877 	bl	80004d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	3301      	adds	r3, #1
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	697a      	ldr	r2, [r7, #20]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	dbf1      	blt.n	80003d4 <_write+0x12>
	}
	return len;
 80003f0:	687b      	ldr	r3, [r7, #4]
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <_close>:

int _close(int file)
{
 80003fa:	b480      	push	{r7}
 80003fc:	b083      	sub	sp, #12
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
	return -1;
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000406:	4618      	mov	r0, r3
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000422:	605a      	str	r2, [r3, #4]
	return 0;
 8000424:	2300      	movs	r3, #0
}
 8000426:	4618      	mov	r0, r3
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <_isatty>:

int _isatty(int file)
{
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
	return 1;
 800043a:	2301      	movs	r3, #1
}
 800043c:	4618      	mov	r0, r3
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
	return 0;
 8000454:	2300      	movs	r3, #0
}
 8000456:	4618      	mov	r0, r3
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
	...

08000464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800046c:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <_sbrk+0x5c>)
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <_sbrk+0x60>)
 8000470:	1ad3      	subs	r3, r2, r3
 8000472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000478:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <_sbrk+0x64>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d102      	bne.n	8000486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <_sbrk+0x64>)
 8000482:	4a12      	ldr	r2, [pc, #72]	; (80004cc <_sbrk+0x68>)
 8000484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <_sbrk+0x64>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4413      	add	r3, r2
 800048e:	693a      	ldr	r2, [r7, #16]
 8000490:	429a      	cmp	r2, r3
 8000492:	d207      	bcs.n	80004a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000494:	f000 f8ce 	bl	8000634 <__errno>
 8000498:	4603      	mov	r3, r0
 800049a:	220c      	movs	r2, #12
 800049c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800049e:	f04f 33ff 	mov.w	r3, #4294967295
 80004a2:	e009      	b.n	80004b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <_sbrk+0x64>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004aa:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <_sbrk+0x64>)
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	4a05      	ldr	r2, [pc, #20]	; (80004c8 <_sbrk+0x64>)
 80004b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004b6:	68fb      	ldr	r3, [r7, #12]
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	3718      	adds	r7, #24
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20020000 	.word	0x20020000
 80004c4:	00000400 	.word	0x00000400
 80004c8:	20000080 	.word	0x20000080
 80004cc:	200000a0 	.word	0x200000a0

080004d0 <__io_putchar>:

#include <uart.h>


int __io_putchar(int ch)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f000 f83f 	bl	800055c <uart2_write>
	return ch;
 80004de:	687b      	ldr	r3, [r7, #4]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <usart2_txRx_init>:


void usart2_txRx_init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0

	// enable clock for GPIO and USART
	//RCC->AHB1ENR |= GPIOA_ENA;
	RCC->APB1ENR |= USART2ENA;
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <usart2_txRx_init+0x64>)
 80004ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f0:	4a16      	ldr	r2, [pc, #88]	; (800054c <usart2_txRx_init+0x64>)
 80004f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f6:	6413      	str	r3, [r2, #64]	; 0x40

	//set alternate function
	GPIOA->MODER |= (2U<<4);
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <usart2_txRx_init+0x68>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <usart2_txRx_init+0x68>)
 80004fe:	f043 0320 	orr.w	r3, r3, #32
 8000502:	6013      	str	r3, [r2, #0]

	//set alternate function type
	GPIOA->AFR[0] |= (7U<<8);
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <usart2_txRx_init+0x68>)
 8000506:	6a1b      	ldr	r3, [r3, #32]
 8000508:	4a11      	ldr	r2, [pc, #68]	; (8000550 <usart2_txRx_init+0x68>)
 800050a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800050e:	6213      	str	r3, [r2, #32]

	//set PA3 as Rx mode
	GPIOA->MODER |= (2U<<6);
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <usart2_txRx_init+0x68>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <usart2_txRx_init+0x68>)
 8000516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051a:	6013      	str	r3, [r2, #0]

	// set alternate function type for PA3
	GPIOA->AFR[0] |= (7U<<12);
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <usart2_txRx_init+0x68>)
 800051e:	6a1b      	ldr	r3, [r3, #32]
 8000520:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <usart2_txRx_init+0x68>)
 8000522:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000526:	6213      	str	r3, [r2, #32]

	//Configure Baud rate
	setBaudrate(USART2, SYS_FREQ, USARt_BAUDRATE);
 8000528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800052c:	4909      	ldr	r1, [pc, #36]	; (8000554 <usart2_txRx_init+0x6c>)
 800052e:	480a      	ldr	r0, [pc, #40]	; (8000558 <usart2_txRx_init+0x70>)
 8000530:	f000 f82e 	bl	8000590 <setBaudrate>

	//set the transfer direction to both Tx and Rx
	USART2->CR1 = ((1U<<3) | (1U<<2));
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <usart2_txRx_init+0x70>)
 8000536:	220c      	movs	r2, #12
 8000538:	60da      	str	r2, [r3, #12]


	//enable module from control register
	USART2->CR1 |= (1U<<13);
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <usart2_txRx_init+0x70>)
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	4a06      	ldr	r2, [pc, #24]	; (8000558 <usart2_txRx_init+0x70>)
 8000540:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000544:	60d3      	str	r3, [r2, #12]


}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40023800 	.word	0x40023800
 8000550:	40020000 	.word	0x40020000
 8000554:	00f42400 	.word	0x00f42400
 8000558:	40004400 	.word	0x40004400

0800055c <uart2_write>:
	// read from data register
	return USART2->DR;
}

void uart2_write(int ch)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	//Transmit data register is empty
	while(!(USART2->SR & (1U<<7)));
 8000564:	bf00      	nop
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <uart2_write+0x30>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0f9      	beq.n	8000566 <uart2_write+0xa>

	//Write to transmit

	USART2->DR |= (ch & 0xFF);
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <uart2_write+0x30>)
 8000574:	685a      	ldr	r2, [r3, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	4904      	ldr	r1, [pc, #16]	; (800058c <uart2_write+0x30>)
 800057c:	4313      	orrs	r3, r2
 800057e:	604b      	str	r3, [r1, #4]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	40004400 	.word	0x40004400

08000590 <setBaudrate>:

static void setBaudrate(USART_TypeDef *USARTx, uint32_t PeriphClock, uint32_t Baudrate)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
	USARTx->BRR |= compute_uart_baudrate(PeriphClock, Baudrate);
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	68b8      	ldr	r0, [r7, #8]
 80005a0:	f000 f80b 	bl	80005ba <compute_uart_baudrate>
 80005a4:	4603      	mov	r3, r0
 80005a6:	461a      	mov	r2, r3
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	431a      	orrs	r2, r3
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	609a      	str	r2, [r3, #8]
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <compute_uart_baudrate>:

static uint16_t compute_uart_baudrate(uint32_t PeriphClock, uint32_t Baudrate)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
	return ((PeriphClock + (Baudrate/2U))/Baudrate);
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	085a      	lsrs	r2, r3, #1
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	441a      	add	r2, r3
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	b29b      	uxth	r3, r3
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <LoopForever+0x6>)
  ldr r1, =_edata
 80005ea:	490d      	ldr	r1, [pc, #52]	; (8000620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <LoopForever+0xe>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000600:	4c0a      	ldr	r4, [pc, #40]	; (800062c <LoopForever+0x16>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800060e:	f000 f817 	bl	8000640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000612:	f7ff fea1 	bl	8000358 <main>

08000616 <LoopForever>:

LoopForever:
    b LoopForever
 8000616:	e7fe      	b.n	8000616 <LoopForever>
  ldr   r0, =_estack
 8000618:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000624:	08001618 	.word	0x08001618
  ldr r2, =_sbss
 8000628:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800062c:	200000a0 	.word	0x200000a0

08000630 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC_IRQHandler>
	...

08000634 <__errno>:
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <__errno+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000000 	.word	0x20000000

08000640 <__libc_init_array>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	4d0d      	ldr	r5, [pc, #52]	; (8000678 <__libc_init_array+0x38>)
 8000644:	4c0d      	ldr	r4, [pc, #52]	; (800067c <__libc_init_array+0x3c>)
 8000646:	1b64      	subs	r4, r4, r5
 8000648:	10a4      	asrs	r4, r4, #2
 800064a:	2600      	movs	r6, #0
 800064c:	42a6      	cmp	r6, r4
 800064e:	d109      	bne.n	8000664 <__libc_init_array+0x24>
 8000650:	4d0b      	ldr	r5, [pc, #44]	; (8000680 <__libc_init_array+0x40>)
 8000652:	4c0c      	ldr	r4, [pc, #48]	; (8000684 <__libc_init_array+0x44>)
 8000654:	f000 ff76 	bl	8001544 <_init>
 8000658:	1b64      	subs	r4, r4, r5
 800065a:	10a4      	asrs	r4, r4, #2
 800065c:	2600      	movs	r6, #0
 800065e:	42a6      	cmp	r6, r4
 8000660:	d105      	bne.n	800066e <__libc_init_array+0x2e>
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f855 3b04 	ldr.w	r3, [r5], #4
 8000668:	4798      	blx	r3
 800066a:	3601      	adds	r6, #1
 800066c:	e7ee      	b.n	800064c <__libc_init_array+0xc>
 800066e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000672:	4798      	blx	r3
 8000674:	3601      	adds	r6, #1
 8000676:	e7f2      	b.n	800065e <__libc_init_array+0x1e>
 8000678:	08001610 	.word	0x08001610
 800067c:	08001610 	.word	0x08001610
 8000680:	08001610 	.word	0x08001610
 8000684:	08001614 	.word	0x08001614

08000688 <memset>:
 8000688:	4402      	add	r2, r0
 800068a:	4603      	mov	r3, r0
 800068c:	4293      	cmp	r3, r2
 800068e:	d100      	bne.n	8000692 <memset+0xa>
 8000690:	4770      	bx	lr
 8000692:	f803 1b01 	strb.w	r1, [r3], #1
 8000696:	e7f9      	b.n	800068c <memset+0x4>

08000698 <iprintf>:
 8000698:	b40f      	push	{r0, r1, r2, r3}
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <iprintf+0x2c>)
 800069c:	b513      	push	{r0, r1, r4, lr}
 800069e:	681c      	ldr	r4, [r3, #0]
 80006a0:	b124      	cbz	r4, 80006ac <iprintf+0x14>
 80006a2:	69a3      	ldr	r3, [r4, #24]
 80006a4:	b913      	cbnz	r3, 80006ac <iprintf+0x14>
 80006a6:	4620      	mov	r0, r4
 80006a8:	f000 f866 	bl	8000778 <__sinit>
 80006ac:	ab05      	add	r3, sp, #20
 80006ae:	9a04      	ldr	r2, [sp, #16]
 80006b0:	68a1      	ldr	r1, [r4, #8]
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	4620      	mov	r0, r4
 80006b6:	f000 f983 	bl	80009c0 <_vfiprintf_r>
 80006ba:	b002      	add	sp, #8
 80006bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c0:	b004      	add	sp, #16
 80006c2:	4770      	bx	lr
 80006c4:	20000000 	.word	0x20000000

080006c8 <std>:
 80006c8:	2300      	movs	r3, #0
 80006ca:	b510      	push	{r4, lr}
 80006cc:	4604      	mov	r4, r0
 80006ce:	e9c0 3300 	strd	r3, r3, [r0]
 80006d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006d6:	6083      	str	r3, [r0, #8]
 80006d8:	8181      	strh	r1, [r0, #12]
 80006da:	6643      	str	r3, [r0, #100]	; 0x64
 80006dc:	81c2      	strh	r2, [r0, #14]
 80006de:	6183      	str	r3, [r0, #24]
 80006e0:	4619      	mov	r1, r3
 80006e2:	2208      	movs	r2, #8
 80006e4:	305c      	adds	r0, #92	; 0x5c
 80006e6:	f7ff ffcf 	bl	8000688 <memset>
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <std+0x38>)
 80006ec:	6263      	str	r3, [r4, #36]	; 0x24
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <std+0x3c>)
 80006f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <std+0x40>)
 80006f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <std+0x44>)
 80006f8:	6224      	str	r4, [r4, #32]
 80006fa:	6323      	str	r3, [r4, #48]	; 0x30
 80006fc:	bd10      	pop	{r4, pc}
 80006fe:	bf00      	nop
 8000700:	08000f69 	.word	0x08000f69
 8000704:	08000f8b 	.word	0x08000f8b
 8000708:	08000fc3 	.word	0x08000fc3
 800070c:	08000fe7 	.word	0x08000fe7

08000710 <_cleanup_r>:
 8000710:	4901      	ldr	r1, [pc, #4]	; (8000718 <_cleanup_r+0x8>)
 8000712:	f000 b8af 	b.w	8000874 <_fwalk_reent>
 8000716:	bf00      	nop
 8000718:	080012c1 	.word	0x080012c1

0800071c <__sfmoreglue>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	1e4a      	subs	r2, r1, #1
 8000720:	2568      	movs	r5, #104	; 0x68
 8000722:	4355      	muls	r5, r2
 8000724:	460e      	mov	r6, r1
 8000726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800072a:	f000 f8c5 	bl	80008b8 <_malloc_r>
 800072e:	4604      	mov	r4, r0
 8000730:	b140      	cbz	r0, 8000744 <__sfmoreglue+0x28>
 8000732:	2100      	movs	r1, #0
 8000734:	e9c0 1600 	strd	r1, r6, [r0]
 8000738:	300c      	adds	r0, #12
 800073a:	60a0      	str	r0, [r4, #8]
 800073c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000740:	f7ff ffa2 	bl	8000688 <memset>
 8000744:	4620      	mov	r0, r4
 8000746:	bd70      	pop	{r4, r5, r6, pc}

08000748 <__sfp_lock_acquire>:
 8000748:	4801      	ldr	r0, [pc, #4]	; (8000750 <__sfp_lock_acquire+0x8>)
 800074a:	f000 b8b3 	b.w	80008b4 <__retarget_lock_acquire_recursive>
 800074e:	bf00      	nop
 8000750:	20000098 	.word	0x20000098

08000754 <__sfp_lock_release>:
 8000754:	4801      	ldr	r0, [pc, #4]	; (800075c <__sfp_lock_release+0x8>)
 8000756:	f000 b8ae 	b.w	80008b6 <__retarget_lock_release_recursive>
 800075a:	bf00      	nop
 800075c:	20000098 	.word	0x20000098

08000760 <__sinit_lock_acquire>:
 8000760:	4801      	ldr	r0, [pc, #4]	; (8000768 <__sinit_lock_acquire+0x8>)
 8000762:	f000 b8a7 	b.w	80008b4 <__retarget_lock_acquire_recursive>
 8000766:	bf00      	nop
 8000768:	20000093 	.word	0x20000093

0800076c <__sinit_lock_release>:
 800076c:	4801      	ldr	r0, [pc, #4]	; (8000774 <__sinit_lock_release+0x8>)
 800076e:	f000 b8a2 	b.w	80008b6 <__retarget_lock_release_recursive>
 8000772:	bf00      	nop
 8000774:	20000093 	.word	0x20000093

08000778 <__sinit>:
 8000778:	b510      	push	{r4, lr}
 800077a:	4604      	mov	r4, r0
 800077c:	f7ff fff0 	bl	8000760 <__sinit_lock_acquire>
 8000780:	69a3      	ldr	r3, [r4, #24]
 8000782:	b11b      	cbz	r3, 800078c <__sinit+0x14>
 8000784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000788:	f7ff bff0 	b.w	800076c <__sinit_lock_release>
 800078c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000790:	6523      	str	r3, [r4, #80]	; 0x50
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <__sinit+0x68>)
 8000794:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <__sinit+0x6c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	62a2      	str	r2, [r4, #40]	; 0x28
 800079a:	42a3      	cmp	r3, r4
 800079c:	bf04      	itt	eq
 800079e:	2301      	moveq	r3, #1
 80007a0:	61a3      	streq	r3, [r4, #24]
 80007a2:	4620      	mov	r0, r4
 80007a4:	f000 f820 	bl	80007e8 <__sfp>
 80007a8:	6060      	str	r0, [r4, #4]
 80007aa:	4620      	mov	r0, r4
 80007ac:	f000 f81c 	bl	80007e8 <__sfp>
 80007b0:	60a0      	str	r0, [r4, #8]
 80007b2:	4620      	mov	r0, r4
 80007b4:	f000 f818 	bl	80007e8 <__sfp>
 80007b8:	2200      	movs	r2, #0
 80007ba:	60e0      	str	r0, [r4, #12]
 80007bc:	2104      	movs	r1, #4
 80007be:	6860      	ldr	r0, [r4, #4]
 80007c0:	f7ff ff82 	bl	80006c8 <std>
 80007c4:	68a0      	ldr	r0, [r4, #8]
 80007c6:	2201      	movs	r2, #1
 80007c8:	2109      	movs	r1, #9
 80007ca:	f7ff ff7d 	bl	80006c8 <std>
 80007ce:	68e0      	ldr	r0, [r4, #12]
 80007d0:	2202      	movs	r2, #2
 80007d2:	2112      	movs	r1, #18
 80007d4:	f7ff ff78 	bl	80006c8 <std>
 80007d8:	2301      	movs	r3, #1
 80007da:	61a3      	str	r3, [r4, #24]
 80007dc:	e7d2      	b.n	8000784 <__sinit+0xc>
 80007de:	bf00      	nop
 80007e0:	08001578 	.word	0x08001578
 80007e4:	08000711 	.word	0x08000711

080007e8 <__sfp>:
 80007e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ea:	4607      	mov	r7, r0
 80007ec:	f7ff ffac 	bl	8000748 <__sfp_lock_acquire>
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <__sfp+0x84>)
 80007f2:	681e      	ldr	r6, [r3, #0]
 80007f4:	69b3      	ldr	r3, [r6, #24]
 80007f6:	b913      	cbnz	r3, 80007fe <__sfp+0x16>
 80007f8:	4630      	mov	r0, r6
 80007fa:	f7ff ffbd 	bl	8000778 <__sinit>
 80007fe:	3648      	adds	r6, #72	; 0x48
 8000800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000804:	3b01      	subs	r3, #1
 8000806:	d503      	bpl.n	8000810 <__sfp+0x28>
 8000808:	6833      	ldr	r3, [r6, #0]
 800080a:	b30b      	cbz	r3, 8000850 <__sfp+0x68>
 800080c:	6836      	ldr	r6, [r6, #0]
 800080e:	e7f7      	b.n	8000800 <__sfp+0x18>
 8000810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000814:	b9d5      	cbnz	r5, 800084c <__sfp+0x64>
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <__sfp+0x88>)
 8000818:	60e3      	str	r3, [r4, #12]
 800081a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800081e:	6665      	str	r5, [r4, #100]	; 0x64
 8000820:	f000 f847 	bl	80008b2 <__retarget_lock_init_recursive>
 8000824:	f7ff ff96 	bl	8000754 <__sfp_lock_release>
 8000828:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800082c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000830:	6025      	str	r5, [r4, #0]
 8000832:	61a5      	str	r5, [r4, #24]
 8000834:	2208      	movs	r2, #8
 8000836:	4629      	mov	r1, r5
 8000838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800083c:	f7ff ff24 	bl	8000688 <memset>
 8000840:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000844:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000848:	4620      	mov	r0, r4
 800084a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800084c:	3468      	adds	r4, #104	; 0x68
 800084e:	e7d9      	b.n	8000804 <__sfp+0x1c>
 8000850:	2104      	movs	r1, #4
 8000852:	4638      	mov	r0, r7
 8000854:	f7ff ff62 	bl	800071c <__sfmoreglue>
 8000858:	4604      	mov	r4, r0
 800085a:	6030      	str	r0, [r6, #0]
 800085c:	2800      	cmp	r0, #0
 800085e:	d1d5      	bne.n	800080c <__sfp+0x24>
 8000860:	f7ff ff78 	bl	8000754 <__sfp_lock_release>
 8000864:	230c      	movs	r3, #12
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	e7ee      	b.n	8000848 <__sfp+0x60>
 800086a:	bf00      	nop
 800086c:	08001578 	.word	0x08001578
 8000870:	ffff0001 	.word	0xffff0001

08000874 <_fwalk_reent>:
 8000874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000878:	4606      	mov	r6, r0
 800087a:	4688      	mov	r8, r1
 800087c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000880:	2700      	movs	r7, #0
 8000882:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000886:	f1b9 0901 	subs.w	r9, r9, #1
 800088a:	d505      	bpl.n	8000898 <_fwalk_reent+0x24>
 800088c:	6824      	ldr	r4, [r4, #0]
 800088e:	2c00      	cmp	r4, #0
 8000890:	d1f7      	bne.n	8000882 <_fwalk_reent+0xe>
 8000892:	4638      	mov	r0, r7
 8000894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000898:	89ab      	ldrh	r3, [r5, #12]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d907      	bls.n	80008ae <_fwalk_reent+0x3a>
 800089e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008a2:	3301      	adds	r3, #1
 80008a4:	d003      	beq.n	80008ae <_fwalk_reent+0x3a>
 80008a6:	4629      	mov	r1, r5
 80008a8:	4630      	mov	r0, r6
 80008aa:	47c0      	blx	r8
 80008ac:	4307      	orrs	r7, r0
 80008ae:	3568      	adds	r5, #104	; 0x68
 80008b0:	e7e9      	b.n	8000886 <_fwalk_reent+0x12>

080008b2 <__retarget_lock_init_recursive>:
 80008b2:	4770      	bx	lr

080008b4 <__retarget_lock_acquire_recursive>:
 80008b4:	4770      	bx	lr

080008b6 <__retarget_lock_release_recursive>:
 80008b6:	4770      	bx	lr

080008b8 <_malloc_r>:
 80008b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ba:	1ccd      	adds	r5, r1, #3
 80008bc:	f025 0503 	bic.w	r5, r5, #3
 80008c0:	3508      	adds	r5, #8
 80008c2:	2d0c      	cmp	r5, #12
 80008c4:	bf38      	it	cc
 80008c6:	250c      	movcc	r5, #12
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	4606      	mov	r6, r0
 80008cc:	db01      	blt.n	80008d2 <_malloc_r+0x1a>
 80008ce:	42a9      	cmp	r1, r5
 80008d0:	d903      	bls.n	80008da <_malloc_r+0x22>
 80008d2:	230c      	movs	r3, #12
 80008d4:	6033      	str	r3, [r6, #0]
 80008d6:	2000      	movs	r0, #0
 80008d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008da:	f000 fda3 	bl	8001424 <__malloc_lock>
 80008de:	4921      	ldr	r1, [pc, #132]	; (8000964 <_malloc_r+0xac>)
 80008e0:	680a      	ldr	r2, [r1, #0]
 80008e2:	4614      	mov	r4, r2
 80008e4:	b99c      	cbnz	r4, 800090e <_malloc_r+0x56>
 80008e6:	4f20      	ldr	r7, [pc, #128]	; (8000968 <_malloc_r+0xb0>)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	b923      	cbnz	r3, 80008f6 <_malloc_r+0x3e>
 80008ec:	4621      	mov	r1, r4
 80008ee:	4630      	mov	r0, r6
 80008f0:	f000 fb2a 	bl	8000f48 <_sbrk_r>
 80008f4:	6038      	str	r0, [r7, #0]
 80008f6:	4629      	mov	r1, r5
 80008f8:	4630      	mov	r0, r6
 80008fa:	f000 fb25 	bl	8000f48 <_sbrk_r>
 80008fe:	1c43      	adds	r3, r0, #1
 8000900:	d123      	bne.n	800094a <_malloc_r+0x92>
 8000902:	230c      	movs	r3, #12
 8000904:	6033      	str	r3, [r6, #0]
 8000906:	4630      	mov	r0, r6
 8000908:	f000 fd92 	bl	8001430 <__malloc_unlock>
 800090c:	e7e3      	b.n	80008d6 <_malloc_r+0x1e>
 800090e:	6823      	ldr	r3, [r4, #0]
 8000910:	1b5b      	subs	r3, r3, r5
 8000912:	d417      	bmi.n	8000944 <_malloc_r+0x8c>
 8000914:	2b0b      	cmp	r3, #11
 8000916:	d903      	bls.n	8000920 <_malloc_r+0x68>
 8000918:	6023      	str	r3, [r4, #0]
 800091a:	441c      	add	r4, r3
 800091c:	6025      	str	r5, [r4, #0]
 800091e:	e004      	b.n	800092a <_malloc_r+0x72>
 8000920:	6863      	ldr	r3, [r4, #4]
 8000922:	42a2      	cmp	r2, r4
 8000924:	bf0c      	ite	eq
 8000926:	600b      	streq	r3, [r1, #0]
 8000928:	6053      	strne	r3, [r2, #4]
 800092a:	4630      	mov	r0, r6
 800092c:	f000 fd80 	bl	8001430 <__malloc_unlock>
 8000930:	f104 000b 	add.w	r0, r4, #11
 8000934:	1d23      	adds	r3, r4, #4
 8000936:	f020 0007 	bic.w	r0, r0, #7
 800093a:	1ac2      	subs	r2, r0, r3
 800093c:	d0cc      	beq.n	80008d8 <_malloc_r+0x20>
 800093e:	1a1b      	subs	r3, r3, r0
 8000940:	50a3      	str	r3, [r4, r2]
 8000942:	e7c9      	b.n	80008d8 <_malloc_r+0x20>
 8000944:	4622      	mov	r2, r4
 8000946:	6864      	ldr	r4, [r4, #4]
 8000948:	e7cc      	b.n	80008e4 <_malloc_r+0x2c>
 800094a:	1cc4      	adds	r4, r0, #3
 800094c:	f024 0403 	bic.w	r4, r4, #3
 8000950:	42a0      	cmp	r0, r4
 8000952:	d0e3      	beq.n	800091c <_malloc_r+0x64>
 8000954:	1a21      	subs	r1, r4, r0
 8000956:	4630      	mov	r0, r6
 8000958:	f000 faf6 	bl	8000f48 <_sbrk_r>
 800095c:	3001      	adds	r0, #1
 800095e:	d1dd      	bne.n	800091c <_malloc_r+0x64>
 8000960:	e7cf      	b.n	8000902 <_malloc_r+0x4a>
 8000962:	bf00      	nop
 8000964:	20000084 	.word	0x20000084
 8000968:	20000088 	.word	0x20000088

0800096c <__sfputc_r>:
 800096c:	6893      	ldr	r3, [r2, #8]
 800096e:	3b01      	subs	r3, #1
 8000970:	2b00      	cmp	r3, #0
 8000972:	b410      	push	{r4}
 8000974:	6093      	str	r3, [r2, #8]
 8000976:	da08      	bge.n	800098a <__sfputc_r+0x1e>
 8000978:	6994      	ldr	r4, [r2, #24]
 800097a:	42a3      	cmp	r3, r4
 800097c:	db01      	blt.n	8000982 <__sfputc_r+0x16>
 800097e:	290a      	cmp	r1, #10
 8000980:	d103      	bne.n	800098a <__sfputc_r+0x1e>
 8000982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000986:	f000 bb33 	b.w	8000ff0 <__swbuf_r>
 800098a:	6813      	ldr	r3, [r2, #0]
 800098c:	1c58      	adds	r0, r3, #1
 800098e:	6010      	str	r0, [r2, #0]
 8000990:	7019      	strb	r1, [r3, #0]
 8000992:	4608      	mov	r0, r1
 8000994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000998:	4770      	bx	lr

0800099a <__sfputs_r>:
 800099a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099c:	4606      	mov	r6, r0
 800099e:	460f      	mov	r7, r1
 80009a0:	4614      	mov	r4, r2
 80009a2:	18d5      	adds	r5, r2, r3
 80009a4:	42ac      	cmp	r4, r5
 80009a6:	d101      	bne.n	80009ac <__sfputs_r+0x12>
 80009a8:	2000      	movs	r0, #0
 80009aa:	e007      	b.n	80009bc <__sfputs_r+0x22>
 80009ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009b0:	463a      	mov	r2, r7
 80009b2:	4630      	mov	r0, r6
 80009b4:	f7ff ffda 	bl	800096c <__sfputc_r>
 80009b8:	1c43      	adds	r3, r0, #1
 80009ba:	d1f3      	bne.n	80009a4 <__sfputs_r+0xa>
 80009bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080009c0 <_vfiprintf_r>:
 80009c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009c4:	460d      	mov	r5, r1
 80009c6:	b09d      	sub	sp, #116	; 0x74
 80009c8:	4614      	mov	r4, r2
 80009ca:	4698      	mov	r8, r3
 80009cc:	4606      	mov	r6, r0
 80009ce:	b118      	cbz	r0, 80009d8 <_vfiprintf_r+0x18>
 80009d0:	6983      	ldr	r3, [r0, #24]
 80009d2:	b90b      	cbnz	r3, 80009d8 <_vfiprintf_r+0x18>
 80009d4:	f7ff fed0 	bl	8000778 <__sinit>
 80009d8:	4b89      	ldr	r3, [pc, #548]	; (8000c00 <_vfiprintf_r+0x240>)
 80009da:	429d      	cmp	r5, r3
 80009dc:	d11b      	bne.n	8000a16 <_vfiprintf_r+0x56>
 80009de:	6875      	ldr	r5, [r6, #4]
 80009e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009e2:	07d9      	lsls	r1, r3, #31
 80009e4:	d405      	bmi.n	80009f2 <_vfiprintf_r+0x32>
 80009e6:	89ab      	ldrh	r3, [r5, #12]
 80009e8:	059a      	lsls	r2, r3, #22
 80009ea:	d402      	bmi.n	80009f2 <_vfiprintf_r+0x32>
 80009ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80009ee:	f7ff ff61 	bl	80008b4 <__retarget_lock_acquire_recursive>
 80009f2:	89ab      	ldrh	r3, [r5, #12]
 80009f4:	071b      	lsls	r3, r3, #28
 80009f6:	d501      	bpl.n	80009fc <_vfiprintf_r+0x3c>
 80009f8:	692b      	ldr	r3, [r5, #16]
 80009fa:	b9eb      	cbnz	r3, 8000a38 <_vfiprintf_r+0x78>
 80009fc:	4629      	mov	r1, r5
 80009fe:	4630      	mov	r0, r6
 8000a00:	f000 fb5a 	bl	80010b8 <__swsetup_r>
 8000a04:	b1c0      	cbz	r0, 8000a38 <_vfiprintf_r+0x78>
 8000a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a08:	07dc      	lsls	r4, r3, #31
 8000a0a:	d50e      	bpl.n	8000a2a <_vfiprintf_r+0x6a>
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	b01d      	add	sp, #116	; 0x74
 8000a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a16:	4b7b      	ldr	r3, [pc, #492]	; (8000c04 <_vfiprintf_r+0x244>)
 8000a18:	429d      	cmp	r5, r3
 8000a1a:	d101      	bne.n	8000a20 <_vfiprintf_r+0x60>
 8000a1c:	68b5      	ldr	r5, [r6, #8]
 8000a1e:	e7df      	b.n	80009e0 <_vfiprintf_r+0x20>
 8000a20:	4b79      	ldr	r3, [pc, #484]	; (8000c08 <_vfiprintf_r+0x248>)
 8000a22:	429d      	cmp	r5, r3
 8000a24:	bf08      	it	eq
 8000a26:	68f5      	ldreq	r5, [r6, #12]
 8000a28:	e7da      	b.n	80009e0 <_vfiprintf_r+0x20>
 8000a2a:	89ab      	ldrh	r3, [r5, #12]
 8000a2c:	0598      	lsls	r0, r3, #22
 8000a2e:	d4ed      	bmi.n	8000a0c <_vfiprintf_r+0x4c>
 8000a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a32:	f7ff ff40 	bl	80008b6 <__retarget_lock_release_recursive>
 8000a36:	e7e9      	b.n	8000a0c <_vfiprintf_r+0x4c>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a46:	2330      	movs	r3, #48	; 0x30
 8000a48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000c0c <_vfiprintf_r+0x24c>
 8000a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a50:	f04f 0901 	mov.w	r9, #1
 8000a54:	4623      	mov	r3, r4
 8000a56:	469a      	mov	sl, r3
 8000a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a5c:	b10a      	cbz	r2, 8000a62 <_vfiprintf_r+0xa2>
 8000a5e:	2a25      	cmp	r2, #37	; 0x25
 8000a60:	d1f9      	bne.n	8000a56 <_vfiprintf_r+0x96>
 8000a62:	ebba 0b04 	subs.w	fp, sl, r4
 8000a66:	d00b      	beq.n	8000a80 <_vfiprintf_r+0xc0>
 8000a68:	465b      	mov	r3, fp
 8000a6a:	4622      	mov	r2, r4
 8000a6c:	4629      	mov	r1, r5
 8000a6e:	4630      	mov	r0, r6
 8000a70:	f7ff ff93 	bl	800099a <__sfputs_r>
 8000a74:	3001      	adds	r0, #1
 8000a76:	f000 80aa 	beq.w	8000bce <_vfiprintf_r+0x20e>
 8000a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a7c:	445a      	add	r2, fp
 8000a7e:	9209      	str	r2, [sp, #36]	; 0x24
 8000a80:	f89a 3000 	ldrb.w	r3, [sl]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f000 80a2 	beq.w	8000bce <_vfiprintf_r+0x20e>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a94:	f10a 0a01 	add.w	sl, sl, #1
 8000a98:	9304      	str	r3, [sp, #16]
 8000a9a:	9307      	str	r3, [sp, #28]
 8000a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8000aa2:	4654      	mov	r4, sl
 8000aa4:	2205      	movs	r2, #5
 8000aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000aaa:	4858      	ldr	r0, [pc, #352]	; (8000c0c <_vfiprintf_r+0x24c>)
 8000aac:	f7ff fbb0 	bl	8000210 <memchr>
 8000ab0:	9a04      	ldr	r2, [sp, #16]
 8000ab2:	b9d8      	cbnz	r0, 8000aec <_vfiprintf_r+0x12c>
 8000ab4:	06d1      	lsls	r1, r2, #27
 8000ab6:	bf44      	itt	mi
 8000ab8:	2320      	movmi	r3, #32
 8000aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000abe:	0713      	lsls	r3, r2, #28
 8000ac0:	bf44      	itt	mi
 8000ac2:	232b      	movmi	r3, #43	; 0x2b
 8000ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8000acc:	2b2a      	cmp	r3, #42	; 0x2a
 8000ace:	d015      	beq.n	8000afc <_vfiprintf_r+0x13c>
 8000ad0:	9a07      	ldr	r2, [sp, #28]
 8000ad2:	4654      	mov	r4, sl
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f04f 0c0a 	mov.w	ip, #10
 8000ada:	4621      	mov	r1, r4
 8000adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ae0:	3b30      	subs	r3, #48	; 0x30
 8000ae2:	2b09      	cmp	r3, #9
 8000ae4:	d94e      	bls.n	8000b84 <_vfiprintf_r+0x1c4>
 8000ae6:	b1b0      	cbz	r0, 8000b16 <_vfiprintf_r+0x156>
 8000ae8:	9207      	str	r2, [sp, #28]
 8000aea:	e014      	b.n	8000b16 <_vfiprintf_r+0x156>
 8000aec:	eba0 0308 	sub.w	r3, r0, r8
 8000af0:	fa09 f303 	lsl.w	r3, r9, r3
 8000af4:	4313      	orrs	r3, r2
 8000af6:	9304      	str	r3, [sp, #16]
 8000af8:	46a2      	mov	sl, r4
 8000afa:	e7d2      	b.n	8000aa2 <_vfiprintf_r+0xe2>
 8000afc:	9b03      	ldr	r3, [sp, #12]
 8000afe:	1d19      	adds	r1, r3, #4
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	9103      	str	r1, [sp, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bfbb      	ittet	lt
 8000b08:	425b      	neglt	r3, r3
 8000b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8000b0e:	9307      	strge	r3, [sp, #28]
 8000b10:	9307      	strlt	r3, [sp, #28]
 8000b12:	bfb8      	it	lt
 8000b14:	9204      	strlt	r2, [sp, #16]
 8000b16:	7823      	ldrb	r3, [r4, #0]
 8000b18:	2b2e      	cmp	r3, #46	; 0x2e
 8000b1a:	d10c      	bne.n	8000b36 <_vfiprintf_r+0x176>
 8000b1c:	7863      	ldrb	r3, [r4, #1]
 8000b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8000b20:	d135      	bne.n	8000b8e <_vfiprintf_r+0x1ce>
 8000b22:	9b03      	ldr	r3, [sp, #12]
 8000b24:	1d1a      	adds	r2, r3, #4
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	9203      	str	r2, [sp, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	bfb8      	it	lt
 8000b2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b32:	3402      	adds	r4, #2
 8000b34:	9305      	str	r3, [sp, #20]
 8000b36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000c1c <_vfiprintf_r+0x25c>
 8000b3a:	7821      	ldrb	r1, [r4, #0]
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	4650      	mov	r0, sl
 8000b40:	f7ff fb66 	bl	8000210 <memchr>
 8000b44:	b140      	cbz	r0, 8000b58 <_vfiprintf_r+0x198>
 8000b46:	2340      	movs	r3, #64	; 0x40
 8000b48:	eba0 000a 	sub.w	r0, r0, sl
 8000b4c:	fa03 f000 	lsl.w	r0, r3, r0
 8000b50:	9b04      	ldr	r3, [sp, #16]
 8000b52:	4303      	orrs	r3, r0
 8000b54:	3401      	adds	r4, #1
 8000b56:	9304      	str	r3, [sp, #16]
 8000b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b5c:	482c      	ldr	r0, [pc, #176]	; (8000c10 <_vfiprintf_r+0x250>)
 8000b5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b62:	2206      	movs	r2, #6
 8000b64:	f7ff fb54 	bl	8000210 <memchr>
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	d03f      	beq.n	8000bec <_vfiprintf_r+0x22c>
 8000b6c:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <_vfiprintf_r+0x254>)
 8000b6e:	bb1b      	cbnz	r3, 8000bb8 <_vfiprintf_r+0x1f8>
 8000b70:	9b03      	ldr	r3, [sp, #12]
 8000b72:	3307      	adds	r3, #7
 8000b74:	f023 0307 	bic.w	r3, r3, #7
 8000b78:	3308      	adds	r3, #8
 8000b7a:	9303      	str	r3, [sp, #12]
 8000b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b7e:	443b      	add	r3, r7
 8000b80:	9309      	str	r3, [sp, #36]	; 0x24
 8000b82:	e767      	b.n	8000a54 <_vfiprintf_r+0x94>
 8000b84:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b88:	460c      	mov	r4, r1
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	e7a5      	b.n	8000ada <_vfiprintf_r+0x11a>
 8000b8e:	2300      	movs	r3, #0
 8000b90:	3401      	adds	r4, #1
 8000b92:	9305      	str	r3, [sp, #20]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 0c0a 	mov.w	ip, #10
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ba0:	3a30      	subs	r2, #48	; 0x30
 8000ba2:	2a09      	cmp	r2, #9
 8000ba4:	d903      	bls.n	8000bae <_vfiprintf_r+0x1ee>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0c5      	beq.n	8000b36 <_vfiprintf_r+0x176>
 8000baa:	9105      	str	r1, [sp, #20]
 8000bac:	e7c3      	b.n	8000b36 <_vfiprintf_r+0x176>
 8000bae:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e7f0      	b.n	8000b9a <_vfiprintf_r+0x1da>
 8000bb8:	ab03      	add	r3, sp, #12
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	462a      	mov	r2, r5
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <_vfiprintf_r+0x258>)
 8000bc0:	a904      	add	r1, sp, #16
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	f3af 8000 	nop.w
 8000bc8:	4607      	mov	r7, r0
 8000bca:	1c78      	adds	r0, r7, #1
 8000bcc:	d1d6      	bne.n	8000b7c <_vfiprintf_r+0x1bc>
 8000bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bd0:	07d9      	lsls	r1, r3, #31
 8000bd2:	d405      	bmi.n	8000be0 <_vfiprintf_r+0x220>
 8000bd4:	89ab      	ldrh	r3, [r5, #12]
 8000bd6:	059a      	lsls	r2, r3, #22
 8000bd8:	d402      	bmi.n	8000be0 <_vfiprintf_r+0x220>
 8000bda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bdc:	f7ff fe6b 	bl	80008b6 <__retarget_lock_release_recursive>
 8000be0:	89ab      	ldrh	r3, [r5, #12]
 8000be2:	065b      	lsls	r3, r3, #25
 8000be4:	f53f af12 	bmi.w	8000a0c <_vfiprintf_r+0x4c>
 8000be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000bea:	e711      	b.n	8000a10 <_vfiprintf_r+0x50>
 8000bec:	ab03      	add	r3, sp, #12
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	462a      	mov	r2, r5
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <_vfiprintf_r+0x258>)
 8000bf4:	a904      	add	r1, sp, #16
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	f000 f880 	bl	8000cfc <_printf_i>
 8000bfc:	e7e4      	b.n	8000bc8 <_vfiprintf_r+0x208>
 8000bfe:	bf00      	nop
 8000c00:	0800159c 	.word	0x0800159c
 8000c04:	080015bc 	.word	0x080015bc
 8000c08:	0800157c 	.word	0x0800157c
 8000c0c:	080015dc 	.word	0x080015dc
 8000c10:	080015e6 	.word	0x080015e6
 8000c14:	00000000 	.word	0x00000000
 8000c18:	0800099b 	.word	0x0800099b
 8000c1c:	080015e2 	.word	0x080015e2

08000c20 <_printf_common>:
 8000c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c24:	4616      	mov	r6, r2
 8000c26:	4699      	mov	r9, r3
 8000c28:	688a      	ldr	r2, [r1, #8]
 8000c2a:	690b      	ldr	r3, [r1, #16]
 8000c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c30:	4293      	cmp	r3, r2
 8000c32:	bfb8      	it	lt
 8000c34:	4613      	movlt	r3, r2
 8000c36:	6033      	str	r3, [r6, #0]
 8000c38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c3c:	4607      	mov	r7, r0
 8000c3e:	460c      	mov	r4, r1
 8000c40:	b10a      	cbz	r2, 8000c46 <_printf_common+0x26>
 8000c42:	3301      	adds	r3, #1
 8000c44:	6033      	str	r3, [r6, #0]
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	0699      	lsls	r1, r3, #26
 8000c4a:	bf42      	ittt	mi
 8000c4c:	6833      	ldrmi	r3, [r6, #0]
 8000c4e:	3302      	addmi	r3, #2
 8000c50:	6033      	strmi	r3, [r6, #0]
 8000c52:	6825      	ldr	r5, [r4, #0]
 8000c54:	f015 0506 	ands.w	r5, r5, #6
 8000c58:	d106      	bne.n	8000c68 <_printf_common+0x48>
 8000c5a:	f104 0a19 	add.w	sl, r4, #25
 8000c5e:	68e3      	ldr	r3, [r4, #12]
 8000c60:	6832      	ldr	r2, [r6, #0]
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	42ab      	cmp	r3, r5
 8000c66:	dc26      	bgt.n	8000cb6 <_printf_common+0x96>
 8000c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c6c:	1e13      	subs	r3, r2, #0
 8000c6e:	6822      	ldr	r2, [r4, #0]
 8000c70:	bf18      	it	ne
 8000c72:	2301      	movne	r3, #1
 8000c74:	0692      	lsls	r2, r2, #26
 8000c76:	d42b      	bmi.n	8000cd0 <_printf_common+0xb0>
 8000c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c7c:	4649      	mov	r1, r9
 8000c7e:	4638      	mov	r0, r7
 8000c80:	47c0      	blx	r8
 8000c82:	3001      	adds	r0, #1
 8000c84:	d01e      	beq.n	8000cc4 <_printf_common+0xa4>
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	68e5      	ldr	r5, [r4, #12]
 8000c8a:	6832      	ldr	r2, [r6, #0]
 8000c8c:	f003 0306 	and.w	r3, r3, #6
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	bf08      	it	eq
 8000c94:	1aad      	subeq	r5, r5, r2
 8000c96:	68a3      	ldr	r3, [r4, #8]
 8000c98:	6922      	ldr	r2, [r4, #16]
 8000c9a:	bf0c      	ite	eq
 8000c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ca0:	2500      	movne	r5, #0
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	bfc4      	itt	gt
 8000ca6:	1a9b      	subgt	r3, r3, r2
 8000ca8:	18ed      	addgt	r5, r5, r3
 8000caa:	2600      	movs	r6, #0
 8000cac:	341a      	adds	r4, #26
 8000cae:	42b5      	cmp	r5, r6
 8000cb0:	d11a      	bne.n	8000ce8 <_printf_common+0xc8>
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	e008      	b.n	8000cc8 <_printf_common+0xa8>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	4652      	mov	r2, sl
 8000cba:	4649      	mov	r1, r9
 8000cbc:	4638      	mov	r0, r7
 8000cbe:	47c0      	blx	r8
 8000cc0:	3001      	adds	r0, #1
 8000cc2:	d103      	bne.n	8000ccc <_printf_common+0xac>
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	3501      	adds	r5, #1
 8000cce:	e7c6      	b.n	8000c5e <_printf_common+0x3e>
 8000cd0:	18e1      	adds	r1, r4, r3
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	2030      	movs	r0, #48	; 0x30
 8000cd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000cda:	4422      	add	r2, r4
 8000cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	e7c7      	b.n	8000c78 <_printf_common+0x58>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	4622      	mov	r2, r4
 8000cec:	4649      	mov	r1, r9
 8000cee:	4638      	mov	r0, r7
 8000cf0:	47c0      	blx	r8
 8000cf2:	3001      	adds	r0, #1
 8000cf4:	d0e6      	beq.n	8000cc4 <_printf_common+0xa4>
 8000cf6:	3601      	adds	r6, #1
 8000cf8:	e7d9      	b.n	8000cae <_printf_common+0x8e>
	...

08000cfc <_printf_i>:
 8000cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d00:	460c      	mov	r4, r1
 8000d02:	4691      	mov	r9, r2
 8000d04:	7e27      	ldrb	r7, [r4, #24]
 8000d06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000d08:	2f78      	cmp	r7, #120	; 0x78
 8000d0a:	4680      	mov	r8, r0
 8000d0c:	469a      	mov	sl, r3
 8000d0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d12:	d807      	bhi.n	8000d24 <_printf_i+0x28>
 8000d14:	2f62      	cmp	r7, #98	; 0x62
 8000d16:	d80a      	bhi.n	8000d2e <_printf_i+0x32>
 8000d18:	2f00      	cmp	r7, #0
 8000d1a:	f000 80d8 	beq.w	8000ece <_printf_i+0x1d2>
 8000d1e:	2f58      	cmp	r7, #88	; 0x58
 8000d20:	f000 80a3 	beq.w	8000e6a <_printf_i+0x16e>
 8000d24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000d28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d2c:	e03a      	b.n	8000da4 <_printf_i+0xa8>
 8000d2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d32:	2b15      	cmp	r3, #21
 8000d34:	d8f6      	bhi.n	8000d24 <_printf_i+0x28>
 8000d36:	a001      	add	r0, pc, #4	; (adr r0, 8000d3c <_printf_i+0x40>)
 8000d38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000d3c:	08000d95 	.word	0x08000d95
 8000d40:	08000da9 	.word	0x08000da9
 8000d44:	08000d25 	.word	0x08000d25
 8000d48:	08000d25 	.word	0x08000d25
 8000d4c:	08000d25 	.word	0x08000d25
 8000d50:	08000d25 	.word	0x08000d25
 8000d54:	08000da9 	.word	0x08000da9
 8000d58:	08000d25 	.word	0x08000d25
 8000d5c:	08000d25 	.word	0x08000d25
 8000d60:	08000d25 	.word	0x08000d25
 8000d64:	08000d25 	.word	0x08000d25
 8000d68:	08000eb5 	.word	0x08000eb5
 8000d6c:	08000dd9 	.word	0x08000dd9
 8000d70:	08000e97 	.word	0x08000e97
 8000d74:	08000d25 	.word	0x08000d25
 8000d78:	08000d25 	.word	0x08000d25
 8000d7c:	08000ed7 	.word	0x08000ed7
 8000d80:	08000d25 	.word	0x08000d25
 8000d84:	08000dd9 	.word	0x08000dd9
 8000d88:	08000d25 	.word	0x08000d25
 8000d8c:	08000d25 	.word	0x08000d25
 8000d90:	08000e9f 	.word	0x08000e9f
 8000d94:	680b      	ldr	r3, [r1, #0]
 8000d96:	1d1a      	adds	r2, r3, #4
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	600a      	str	r2, [r1, #0]
 8000d9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000da4:	2301      	movs	r3, #1
 8000da6:	e0a3      	b.n	8000ef0 <_printf_i+0x1f4>
 8000da8:	6825      	ldr	r5, [r4, #0]
 8000daa:	6808      	ldr	r0, [r1, #0]
 8000dac:	062e      	lsls	r6, r5, #24
 8000dae:	f100 0304 	add.w	r3, r0, #4
 8000db2:	d50a      	bpl.n	8000dca <_printf_i+0xce>
 8000db4:	6805      	ldr	r5, [r0, #0]
 8000db6:	600b      	str	r3, [r1, #0]
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	da03      	bge.n	8000dc4 <_printf_i+0xc8>
 8000dbc:	232d      	movs	r3, #45	; 0x2d
 8000dbe:	426d      	negs	r5, r5
 8000dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000dc4:	485e      	ldr	r0, [pc, #376]	; (8000f40 <_printf_i+0x244>)
 8000dc6:	230a      	movs	r3, #10
 8000dc8:	e019      	b.n	8000dfe <_printf_i+0x102>
 8000dca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000dce:	6805      	ldr	r5, [r0, #0]
 8000dd0:	600b      	str	r3, [r1, #0]
 8000dd2:	bf18      	it	ne
 8000dd4:	b22d      	sxthne	r5, r5
 8000dd6:	e7ef      	b.n	8000db8 <_printf_i+0xbc>
 8000dd8:	680b      	ldr	r3, [r1, #0]
 8000dda:	6825      	ldr	r5, [r4, #0]
 8000ddc:	1d18      	adds	r0, r3, #4
 8000dde:	6008      	str	r0, [r1, #0]
 8000de0:	0628      	lsls	r0, r5, #24
 8000de2:	d501      	bpl.n	8000de8 <_printf_i+0xec>
 8000de4:	681d      	ldr	r5, [r3, #0]
 8000de6:	e002      	b.n	8000dee <_printf_i+0xf2>
 8000de8:	0669      	lsls	r1, r5, #25
 8000dea:	d5fb      	bpl.n	8000de4 <_printf_i+0xe8>
 8000dec:	881d      	ldrh	r5, [r3, #0]
 8000dee:	4854      	ldr	r0, [pc, #336]	; (8000f40 <_printf_i+0x244>)
 8000df0:	2f6f      	cmp	r7, #111	; 0x6f
 8000df2:	bf0c      	ite	eq
 8000df4:	2308      	moveq	r3, #8
 8000df6:	230a      	movne	r3, #10
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000dfe:	6866      	ldr	r6, [r4, #4]
 8000e00:	60a6      	str	r6, [r4, #8]
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	bfa2      	ittt	ge
 8000e06:	6821      	ldrge	r1, [r4, #0]
 8000e08:	f021 0104 	bicge.w	r1, r1, #4
 8000e0c:	6021      	strge	r1, [r4, #0]
 8000e0e:	b90d      	cbnz	r5, 8000e14 <_printf_i+0x118>
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d04d      	beq.n	8000eb0 <_printf_i+0x1b4>
 8000e14:	4616      	mov	r6, r2
 8000e16:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e1a:	fb03 5711 	mls	r7, r3, r1, r5
 8000e1e:	5dc7      	ldrb	r7, [r0, r7]
 8000e20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e24:	462f      	mov	r7, r5
 8000e26:	42bb      	cmp	r3, r7
 8000e28:	460d      	mov	r5, r1
 8000e2a:	d9f4      	bls.n	8000e16 <_printf_i+0x11a>
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d10b      	bne.n	8000e48 <_printf_i+0x14c>
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	07df      	lsls	r7, r3, #31
 8000e34:	d508      	bpl.n	8000e48 <_printf_i+0x14c>
 8000e36:	6923      	ldr	r3, [r4, #16]
 8000e38:	6861      	ldr	r1, [r4, #4]
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	bfde      	ittt	le
 8000e3e:	2330      	movle	r3, #48	; 0x30
 8000e40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000e48:	1b92      	subs	r2, r2, r6
 8000e4a:	6122      	str	r2, [r4, #16]
 8000e4c:	f8cd a000 	str.w	sl, [sp]
 8000e50:	464b      	mov	r3, r9
 8000e52:	aa03      	add	r2, sp, #12
 8000e54:	4621      	mov	r1, r4
 8000e56:	4640      	mov	r0, r8
 8000e58:	f7ff fee2 	bl	8000c20 <_printf_common>
 8000e5c:	3001      	adds	r0, #1
 8000e5e:	d14c      	bne.n	8000efa <_printf_i+0x1fe>
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	b004      	add	sp, #16
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	4835      	ldr	r0, [pc, #212]	; (8000f40 <_printf_i+0x244>)
 8000e6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	680e      	ldr	r6, [r1, #0]
 8000e74:	061f      	lsls	r7, r3, #24
 8000e76:	f856 5b04 	ldr.w	r5, [r6], #4
 8000e7a:	600e      	str	r6, [r1, #0]
 8000e7c:	d514      	bpl.n	8000ea8 <_printf_i+0x1ac>
 8000e7e:	07d9      	lsls	r1, r3, #31
 8000e80:	bf44      	itt	mi
 8000e82:	f043 0320 	orrmi.w	r3, r3, #32
 8000e86:	6023      	strmi	r3, [r4, #0]
 8000e88:	b91d      	cbnz	r5, 8000e92 <_printf_i+0x196>
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	f023 0320 	bic.w	r3, r3, #32
 8000e90:	6023      	str	r3, [r4, #0]
 8000e92:	2310      	movs	r3, #16
 8000e94:	e7b0      	b.n	8000df8 <_printf_i+0xfc>
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	6023      	str	r3, [r4, #0]
 8000e9e:	2378      	movs	r3, #120	; 0x78
 8000ea0:	4828      	ldr	r0, [pc, #160]	; (8000f44 <_printf_i+0x248>)
 8000ea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000ea6:	e7e3      	b.n	8000e70 <_printf_i+0x174>
 8000ea8:	065e      	lsls	r6, r3, #25
 8000eaa:	bf48      	it	mi
 8000eac:	b2ad      	uxthmi	r5, r5
 8000eae:	e7e6      	b.n	8000e7e <_printf_i+0x182>
 8000eb0:	4616      	mov	r6, r2
 8000eb2:	e7bb      	b.n	8000e2c <_printf_i+0x130>
 8000eb4:	680b      	ldr	r3, [r1, #0]
 8000eb6:	6826      	ldr	r6, [r4, #0]
 8000eb8:	6960      	ldr	r0, [r4, #20]
 8000eba:	1d1d      	adds	r5, r3, #4
 8000ebc:	600d      	str	r5, [r1, #0]
 8000ebe:	0635      	lsls	r5, r6, #24
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	d501      	bpl.n	8000ec8 <_printf_i+0x1cc>
 8000ec4:	6018      	str	r0, [r3, #0]
 8000ec6:	e002      	b.n	8000ece <_printf_i+0x1d2>
 8000ec8:	0671      	lsls	r1, r6, #25
 8000eca:	d5fb      	bpl.n	8000ec4 <_printf_i+0x1c8>
 8000ecc:	8018      	strh	r0, [r3, #0]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	6123      	str	r3, [r4, #16]
 8000ed2:	4616      	mov	r6, r2
 8000ed4:	e7ba      	b.n	8000e4c <_printf_i+0x150>
 8000ed6:	680b      	ldr	r3, [r1, #0]
 8000ed8:	1d1a      	adds	r2, r3, #4
 8000eda:	600a      	str	r2, [r1, #0]
 8000edc:	681e      	ldr	r6, [r3, #0]
 8000ede:	6862      	ldr	r2, [r4, #4]
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	f7ff f994 	bl	8000210 <memchr>
 8000ee8:	b108      	cbz	r0, 8000eee <_printf_i+0x1f2>
 8000eea:	1b80      	subs	r0, r0, r6
 8000eec:	6060      	str	r0, [r4, #4]
 8000eee:	6863      	ldr	r3, [r4, #4]
 8000ef0:	6123      	str	r3, [r4, #16]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ef8:	e7a8      	b.n	8000e4c <_printf_i+0x150>
 8000efa:	6923      	ldr	r3, [r4, #16]
 8000efc:	4632      	mov	r2, r6
 8000efe:	4649      	mov	r1, r9
 8000f00:	4640      	mov	r0, r8
 8000f02:	47d0      	blx	sl
 8000f04:	3001      	adds	r0, #1
 8000f06:	d0ab      	beq.n	8000e60 <_printf_i+0x164>
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	079b      	lsls	r3, r3, #30
 8000f0c:	d413      	bmi.n	8000f36 <_printf_i+0x23a>
 8000f0e:	68e0      	ldr	r0, [r4, #12]
 8000f10:	9b03      	ldr	r3, [sp, #12]
 8000f12:	4298      	cmp	r0, r3
 8000f14:	bfb8      	it	lt
 8000f16:	4618      	movlt	r0, r3
 8000f18:	e7a4      	b.n	8000e64 <_printf_i+0x168>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	4632      	mov	r2, r6
 8000f1e:	4649      	mov	r1, r9
 8000f20:	4640      	mov	r0, r8
 8000f22:	47d0      	blx	sl
 8000f24:	3001      	adds	r0, #1
 8000f26:	d09b      	beq.n	8000e60 <_printf_i+0x164>
 8000f28:	3501      	adds	r5, #1
 8000f2a:	68e3      	ldr	r3, [r4, #12]
 8000f2c:	9903      	ldr	r1, [sp, #12]
 8000f2e:	1a5b      	subs	r3, r3, r1
 8000f30:	42ab      	cmp	r3, r5
 8000f32:	dcf2      	bgt.n	8000f1a <_printf_i+0x21e>
 8000f34:	e7eb      	b.n	8000f0e <_printf_i+0x212>
 8000f36:	2500      	movs	r5, #0
 8000f38:	f104 0619 	add.w	r6, r4, #25
 8000f3c:	e7f5      	b.n	8000f2a <_printf_i+0x22e>
 8000f3e:	bf00      	nop
 8000f40:	080015ed 	.word	0x080015ed
 8000f44:	080015fe 	.word	0x080015fe

08000f48 <_sbrk_r>:
 8000f48:	b538      	push	{r3, r4, r5, lr}
 8000f4a:	4d06      	ldr	r5, [pc, #24]	; (8000f64 <_sbrk_r+0x1c>)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4608      	mov	r0, r1
 8000f52:	602b      	str	r3, [r5, #0]
 8000f54:	f7ff fa86 	bl	8000464 <_sbrk>
 8000f58:	1c43      	adds	r3, r0, #1
 8000f5a:	d102      	bne.n	8000f62 <_sbrk_r+0x1a>
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	b103      	cbz	r3, 8000f62 <_sbrk_r+0x1a>
 8000f60:	6023      	str	r3, [r4, #0]
 8000f62:	bd38      	pop	{r3, r4, r5, pc}
 8000f64:	2000009c 	.word	0x2000009c

08000f68 <__sread>:
 8000f68:	b510      	push	{r4, lr}
 8000f6a:	460c      	mov	r4, r1
 8000f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f70:	f000 fab4 	bl	80014dc <_read_r>
 8000f74:	2800      	cmp	r0, #0
 8000f76:	bfab      	itete	ge
 8000f78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8000f7c:	181b      	addge	r3, r3, r0
 8000f7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f82:	bfac      	ite	ge
 8000f84:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f86:	81a3      	strhlt	r3, [r4, #12]
 8000f88:	bd10      	pop	{r4, pc}

08000f8a <__swrite>:
 8000f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f8e:	461f      	mov	r7, r3
 8000f90:	898b      	ldrh	r3, [r1, #12]
 8000f92:	05db      	lsls	r3, r3, #23
 8000f94:	4605      	mov	r5, r0
 8000f96:	460c      	mov	r4, r1
 8000f98:	4616      	mov	r6, r2
 8000f9a:	d505      	bpl.n	8000fa8 <__swrite+0x1e>
 8000f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f000 f9c8 	bl	8001338 <_lseek_r>
 8000fa8:	89a3      	ldrh	r3, [r4, #12]
 8000faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fb2:	81a3      	strh	r3, [r4, #12]
 8000fb4:	4632      	mov	r2, r6
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fbe:	f000 b869 	b.w	8001094 <_write_r>

08000fc2 <__sseek>:
 8000fc2:	b510      	push	{r4, lr}
 8000fc4:	460c      	mov	r4, r1
 8000fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fca:	f000 f9b5 	bl	8001338 <_lseek_r>
 8000fce:	1c43      	adds	r3, r0, #1
 8000fd0:	89a3      	ldrh	r3, [r4, #12]
 8000fd2:	bf15      	itete	ne
 8000fd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8000fd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000fda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000fde:	81a3      	strheq	r3, [r4, #12]
 8000fe0:	bf18      	it	ne
 8000fe2:	81a3      	strhne	r3, [r4, #12]
 8000fe4:	bd10      	pop	{r4, pc}

08000fe6 <__sclose>:
 8000fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fea:	f000 b8d3 	b.w	8001194 <_close_r>
	...

08000ff0 <__swbuf_r>:
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff2:	460e      	mov	r6, r1
 8000ff4:	4614      	mov	r4, r2
 8000ff6:	4605      	mov	r5, r0
 8000ff8:	b118      	cbz	r0, 8001002 <__swbuf_r+0x12>
 8000ffa:	6983      	ldr	r3, [r0, #24]
 8000ffc:	b90b      	cbnz	r3, 8001002 <__swbuf_r+0x12>
 8000ffe:	f7ff fbbb 	bl	8000778 <__sinit>
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <__swbuf_r+0x98>)
 8001004:	429c      	cmp	r4, r3
 8001006:	d12b      	bne.n	8001060 <__swbuf_r+0x70>
 8001008:	686c      	ldr	r4, [r5, #4]
 800100a:	69a3      	ldr	r3, [r4, #24]
 800100c:	60a3      	str	r3, [r4, #8]
 800100e:	89a3      	ldrh	r3, [r4, #12]
 8001010:	071a      	lsls	r2, r3, #28
 8001012:	d52f      	bpl.n	8001074 <__swbuf_r+0x84>
 8001014:	6923      	ldr	r3, [r4, #16]
 8001016:	b36b      	cbz	r3, 8001074 <__swbuf_r+0x84>
 8001018:	6923      	ldr	r3, [r4, #16]
 800101a:	6820      	ldr	r0, [r4, #0]
 800101c:	1ac0      	subs	r0, r0, r3
 800101e:	6963      	ldr	r3, [r4, #20]
 8001020:	b2f6      	uxtb	r6, r6
 8001022:	4283      	cmp	r3, r0
 8001024:	4637      	mov	r7, r6
 8001026:	dc04      	bgt.n	8001032 <__swbuf_r+0x42>
 8001028:	4621      	mov	r1, r4
 800102a:	4628      	mov	r0, r5
 800102c:	f000 f948 	bl	80012c0 <_fflush_r>
 8001030:	bb30      	cbnz	r0, 8001080 <__swbuf_r+0x90>
 8001032:	68a3      	ldr	r3, [r4, #8]
 8001034:	3b01      	subs	r3, #1
 8001036:	60a3      	str	r3, [r4, #8]
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	6022      	str	r2, [r4, #0]
 800103e:	701e      	strb	r6, [r3, #0]
 8001040:	6963      	ldr	r3, [r4, #20]
 8001042:	3001      	adds	r0, #1
 8001044:	4283      	cmp	r3, r0
 8001046:	d004      	beq.n	8001052 <__swbuf_r+0x62>
 8001048:	89a3      	ldrh	r3, [r4, #12]
 800104a:	07db      	lsls	r3, r3, #31
 800104c:	d506      	bpl.n	800105c <__swbuf_r+0x6c>
 800104e:	2e0a      	cmp	r6, #10
 8001050:	d104      	bne.n	800105c <__swbuf_r+0x6c>
 8001052:	4621      	mov	r1, r4
 8001054:	4628      	mov	r0, r5
 8001056:	f000 f933 	bl	80012c0 <_fflush_r>
 800105a:	b988      	cbnz	r0, 8001080 <__swbuf_r+0x90>
 800105c:	4638      	mov	r0, r7
 800105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <__swbuf_r+0x9c>)
 8001062:	429c      	cmp	r4, r3
 8001064:	d101      	bne.n	800106a <__swbuf_r+0x7a>
 8001066:	68ac      	ldr	r4, [r5, #8]
 8001068:	e7cf      	b.n	800100a <__swbuf_r+0x1a>
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <__swbuf_r+0xa0>)
 800106c:	429c      	cmp	r4, r3
 800106e:	bf08      	it	eq
 8001070:	68ec      	ldreq	r4, [r5, #12]
 8001072:	e7ca      	b.n	800100a <__swbuf_r+0x1a>
 8001074:	4621      	mov	r1, r4
 8001076:	4628      	mov	r0, r5
 8001078:	f000 f81e 	bl	80010b8 <__swsetup_r>
 800107c:	2800      	cmp	r0, #0
 800107e:	d0cb      	beq.n	8001018 <__swbuf_r+0x28>
 8001080:	f04f 37ff 	mov.w	r7, #4294967295
 8001084:	e7ea      	b.n	800105c <__swbuf_r+0x6c>
 8001086:	bf00      	nop
 8001088:	0800159c 	.word	0x0800159c
 800108c:	080015bc 	.word	0x080015bc
 8001090:	0800157c 	.word	0x0800157c

08001094 <_write_r>:
 8001094:	b538      	push	{r3, r4, r5, lr}
 8001096:	4d07      	ldr	r5, [pc, #28]	; (80010b4 <_write_r+0x20>)
 8001098:	4604      	mov	r4, r0
 800109a:	4608      	mov	r0, r1
 800109c:	4611      	mov	r1, r2
 800109e:	2200      	movs	r2, #0
 80010a0:	602a      	str	r2, [r5, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	f7ff f98d 	bl	80003c2 <_write>
 80010a8:	1c43      	adds	r3, r0, #1
 80010aa:	d102      	bne.n	80010b2 <_write_r+0x1e>
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	b103      	cbz	r3, 80010b2 <_write_r+0x1e>
 80010b0:	6023      	str	r3, [r4, #0]
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
 80010b4:	2000009c 	.word	0x2000009c

080010b8 <__swsetup_r>:
 80010b8:	4b32      	ldr	r3, [pc, #200]	; (8001184 <__swsetup_r+0xcc>)
 80010ba:	b570      	push	{r4, r5, r6, lr}
 80010bc:	681d      	ldr	r5, [r3, #0]
 80010be:	4606      	mov	r6, r0
 80010c0:	460c      	mov	r4, r1
 80010c2:	b125      	cbz	r5, 80010ce <__swsetup_r+0x16>
 80010c4:	69ab      	ldr	r3, [r5, #24]
 80010c6:	b913      	cbnz	r3, 80010ce <__swsetup_r+0x16>
 80010c8:	4628      	mov	r0, r5
 80010ca:	f7ff fb55 	bl	8000778 <__sinit>
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <__swsetup_r+0xd0>)
 80010d0:	429c      	cmp	r4, r3
 80010d2:	d10f      	bne.n	80010f4 <__swsetup_r+0x3c>
 80010d4:	686c      	ldr	r4, [r5, #4]
 80010d6:	89a3      	ldrh	r3, [r4, #12]
 80010d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80010dc:	0719      	lsls	r1, r3, #28
 80010de:	d42c      	bmi.n	800113a <__swsetup_r+0x82>
 80010e0:	06dd      	lsls	r5, r3, #27
 80010e2:	d411      	bmi.n	8001108 <__swsetup_r+0x50>
 80010e4:	2309      	movs	r3, #9
 80010e6:	6033      	str	r3, [r6, #0]
 80010e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80010ec:	81a3      	strh	r3, [r4, #12]
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	e03e      	b.n	8001172 <__swsetup_r+0xba>
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <__swsetup_r+0xd4>)
 80010f6:	429c      	cmp	r4, r3
 80010f8:	d101      	bne.n	80010fe <__swsetup_r+0x46>
 80010fa:	68ac      	ldr	r4, [r5, #8]
 80010fc:	e7eb      	b.n	80010d6 <__swsetup_r+0x1e>
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <__swsetup_r+0xd8>)
 8001100:	429c      	cmp	r4, r3
 8001102:	bf08      	it	eq
 8001104:	68ec      	ldreq	r4, [r5, #12]
 8001106:	e7e6      	b.n	80010d6 <__swsetup_r+0x1e>
 8001108:	0758      	lsls	r0, r3, #29
 800110a:	d512      	bpl.n	8001132 <__swsetup_r+0x7a>
 800110c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800110e:	b141      	cbz	r1, 8001122 <__swsetup_r+0x6a>
 8001110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001114:	4299      	cmp	r1, r3
 8001116:	d002      	beq.n	800111e <__swsetup_r+0x66>
 8001118:	4630      	mov	r0, r6
 800111a:	f000 f98f 	bl	800143c <_free_r>
 800111e:	2300      	movs	r3, #0
 8001120:	6363      	str	r3, [r4, #52]	; 0x34
 8001122:	89a3      	ldrh	r3, [r4, #12]
 8001124:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001128:	81a3      	strh	r3, [r4, #12]
 800112a:	2300      	movs	r3, #0
 800112c:	6063      	str	r3, [r4, #4]
 800112e:	6923      	ldr	r3, [r4, #16]
 8001130:	6023      	str	r3, [r4, #0]
 8001132:	89a3      	ldrh	r3, [r4, #12]
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	81a3      	strh	r3, [r4, #12]
 800113a:	6923      	ldr	r3, [r4, #16]
 800113c:	b94b      	cbnz	r3, 8001152 <__swsetup_r+0x9a>
 800113e:	89a3      	ldrh	r3, [r4, #12]
 8001140:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001148:	d003      	beq.n	8001152 <__swsetup_r+0x9a>
 800114a:	4621      	mov	r1, r4
 800114c:	4630      	mov	r0, r6
 800114e:	f000 f929 	bl	80013a4 <__smakebuf_r>
 8001152:	89a0      	ldrh	r0, [r4, #12]
 8001154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001158:	f010 0301 	ands.w	r3, r0, #1
 800115c:	d00a      	beq.n	8001174 <__swsetup_r+0xbc>
 800115e:	2300      	movs	r3, #0
 8001160:	60a3      	str	r3, [r4, #8]
 8001162:	6963      	ldr	r3, [r4, #20]
 8001164:	425b      	negs	r3, r3
 8001166:	61a3      	str	r3, [r4, #24]
 8001168:	6923      	ldr	r3, [r4, #16]
 800116a:	b943      	cbnz	r3, 800117e <__swsetup_r+0xc6>
 800116c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001170:	d1ba      	bne.n	80010e8 <__swsetup_r+0x30>
 8001172:	bd70      	pop	{r4, r5, r6, pc}
 8001174:	0781      	lsls	r1, r0, #30
 8001176:	bf58      	it	pl
 8001178:	6963      	ldrpl	r3, [r4, #20]
 800117a:	60a3      	str	r3, [r4, #8]
 800117c:	e7f4      	b.n	8001168 <__swsetup_r+0xb0>
 800117e:	2000      	movs	r0, #0
 8001180:	e7f7      	b.n	8001172 <__swsetup_r+0xba>
 8001182:	bf00      	nop
 8001184:	20000000 	.word	0x20000000
 8001188:	0800159c 	.word	0x0800159c
 800118c:	080015bc 	.word	0x080015bc
 8001190:	0800157c 	.word	0x0800157c

08001194 <_close_r>:
 8001194:	b538      	push	{r3, r4, r5, lr}
 8001196:	4d06      	ldr	r5, [pc, #24]	; (80011b0 <_close_r+0x1c>)
 8001198:	2300      	movs	r3, #0
 800119a:	4604      	mov	r4, r0
 800119c:	4608      	mov	r0, r1
 800119e:	602b      	str	r3, [r5, #0]
 80011a0:	f7ff f92b 	bl	80003fa <_close>
 80011a4:	1c43      	adds	r3, r0, #1
 80011a6:	d102      	bne.n	80011ae <_close_r+0x1a>
 80011a8:	682b      	ldr	r3, [r5, #0]
 80011aa:	b103      	cbz	r3, 80011ae <_close_r+0x1a>
 80011ac:	6023      	str	r3, [r4, #0]
 80011ae:	bd38      	pop	{r3, r4, r5, pc}
 80011b0:	2000009c 	.word	0x2000009c

080011b4 <__sflush_r>:
 80011b4:	898a      	ldrh	r2, [r1, #12]
 80011b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011ba:	4605      	mov	r5, r0
 80011bc:	0710      	lsls	r0, r2, #28
 80011be:	460c      	mov	r4, r1
 80011c0:	d458      	bmi.n	8001274 <__sflush_r+0xc0>
 80011c2:	684b      	ldr	r3, [r1, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	dc05      	bgt.n	80011d4 <__sflush_r+0x20>
 80011c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dc02      	bgt.n	80011d4 <__sflush_r+0x20>
 80011ce:	2000      	movs	r0, #0
 80011d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011d6:	2e00      	cmp	r6, #0
 80011d8:	d0f9      	beq.n	80011ce <__sflush_r+0x1a>
 80011da:	2300      	movs	r3, #0
 80011dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80011e0:	682f      	ldr	r7, [r5, #0]
 80011e2:	602b      	str	r3, [r5, #0]
 80011e4:	d032      	beq.n	800124c <__sflush_r+0x98>
 80011e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011e8:	89a3      	ldrh	r3, [r4, #12]
 80011ea:	075a      	lsls	r2, r3, #29
 80011ec:	d505      	bpl.n	80011fa <__sflush_r+0x46>
 80011ee:	6863      	ldr	r3, [r4, #4]
 80011f0:	1ac0      	subs	r0, r0, r3
 80011f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011f4:	b10b      	cbz	r3, 80011fa <__sflush_r+0x46>
 80011f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011f8:	1ac0      	subs	r0, r0, r3
 80011fa:	2300      	movs	r3, #0
 80011fc:	4602      	mov	r2, r0
 80011fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001200:	6a21      	ldr	r1, [r4, #32]
 8001202:	4628      	mov	r0, r5
 8001204:	47b0      	blx	r6
 8001206:	1c43      	adds	r3, r0, #1
 8001208:	89a3      	ldrh	r3, [r4, #12]
 800120a:	d106      	bne.n	800121a <__sflush_r+0x66>
 800120c:	6829      	ldr	r1, [r5, #0]
 800120e:	291d      	cmp	r1, #29
 8001210:	d82c      	bhi.n	800126c <__sflush_r+0xb8>
 8001212:	4a2a      	ldr	r2, [pc, #168]	; (80012bc <__sflush_r+0x108>)
 8001214:	40ca      	lsrs	r2, r1
 8001216:	07d6      	lsls	r6, r2, #31
 8001218:	d528      	bpl.n	800126c <__sflush_r+0xb8>
 800121a:	2200      	movs	r2, #0
 800121c:	6062      	str	r2, [r4, #4]
 800121e:	04d9      	lsls	r1, r3, #19
 8001220:	6922      	ldr	r2, [r4, #16]
 8001222:	6022      	str	r2, [r4, #0]
 8001224:	d504      	bpl.n	8001230 <__sflush_r+0x7c>
 8001226:	1c42      	adds	r2, r0, #1
 8001228:	d101      	bne.n	800122e <__sflush_r+0x7a>
 800122a:	682b      	ldr	r3, [r5, #0]
 800122c:	b903      	cbnz	r3, 8001230 <__sflush_r+0x7c>
 800122e:	6560      	str	r0, [r4, #84]	; 0x54
 8001230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001232:	602f      	str	r7, [r5, #0]
 8001234:	2900      	cmp	r1, #0
 8001236:	d0ca      	beq.n	80011ce <__sflush_r+0x1a>
 8001238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800123c:	4299      	cmp	r1, r3
 800123e:	d002      	beq.n	8001246 <__sflush_r+0x92>
 8001240:	4628      	mov	r0, r5
 8001242:	f000 f8fb 	bl	800143c <_free_r>
 8001246:	2000      	movs	r0, #0
 8001248:	6360      	str	r0, [r4, #52]	; 0x34
 800124a:	e7c1      	b.n	80011d0 <__sflush_r+0x1c>
 800124c:	6a21      	ldr	r1, [r4, #32]
 800124e:	2301      	movs	r3, #1
 8001250:	4628      	mov	r0, r5
 8001252:	47b0      	blx	r6
 8001254:	1c41      	adds	r1, r0, #1
 8001256:	d1c7      	bne.n	80011e8 <__sflush_r+0x34>
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0c4      	beq.n	80011e8 <__sflush_r+0x34>
 800125e:	2b1d      	cmp	r3, #29
 8001260:	d001      	beq.n	8001266 <__sflush_r+0xb2>
 8001262:	2b16      	cmp	r3, #22
 8001264:	d101      	bne.n	800126a <__sflush_r+0xb6>
 8001266:	602f      	str	r7, [r5, #0]
 8001268:	e7b1      	b.n	80011ce <__sflush_r+0x1a>
 800126a:	89a3      	ldrh	r3, [r4, #12]
 800126c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001270:	81a3      	strh	r3, [r4, #12]
 8001272:	e7ad      	b.n	80011d0 <__sflush_r+0x1c>
 8001274:	690f      	ldr	r7, [r1, #16]
 8001276:	2f00      	cmp	r7, #0
 8001278:	d0a9      	beq.n	80011ce <__sflush_r+0x1a>
 800127a:	0793      	lsls	r3, r2, #30
 800127c:	680e      	ldr	r6, [r1, #0]
 800127e:	bf08      	it	eq
 8001280:	694b      	ldreq	r3, [r1, #20]
 8001282:	600f      	str	r7, [r1, #0]
 8001284:	bf18      	it	ne
 8001286:	2300      	movne	r3, #0
 8001288:	eba6 0807 	sub.w	r8, r6, r7
 800128c:	608b      	str	r3, [r1, #8]
 800128e:	f1b8 0f00 	cmp.w	r8, #0
 8001292:	dd9c      	ble.n	80011ce <__sflush_r+0x1a>
 8001294:	6a21      	ldr	r1, [r4, #32]
 8001296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001298:	4643      	mov	r3, r8
 800129a:	463a      	mov	r2, r7
 800129c:	4628      	mov	r0, r5
 800129e:	47b0      	blx	r6
 80012a0:	2800      	cmp	r0, #0
 80012a2:	dc06      	bgt.n	80012b2 <__sflush_r+0xfe>
 80012a4:	89a3      	ldrh	r3, [r4, #12]
 80012a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012aa:	81a3      	strh	r3, [r4, #12]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	e78e      	b.n	80011d0 <__sflush_r+0x1c>
 80012b2:	4407      	add	r7, r0
 80012b4:	eba8 0800 	sub.w	r8, r8, r0
 80012b8:	e7e9      	b.n	800128e <__sflush_r+0xda>
 80012ba:	bf00      	nop
 80012bc:	20400001 	.word	0x20400001

080012c0 <_fflush_r>:
 80012c0:	b538      	push	{r3, r4, r5, lr}
 80012c2:	690b      	ldr	r3, [r1, #16]
 80012c4:	4605      	mov	r5, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	b913      	cbnz	r3, 80012d0 <_fflush_r+0x10>
 80012ca:	2500      	movs	r5, #0
 80012cc:	4628      	mov	r0, r5
 80012ce:	bd38      	pop	{r3, r4, r5, pc}
 80012d0:	b118      	cbz	r0, 80012da <_fflush_r+0x1a>
 80012d2:	6983      	ldr	r3, [r0, #24]
 80012d4:	b90b      	cbnz	r3, 80012da <_fflush_r+0x1a>
 80012d6:	f7ff fa4f 	bl	8000778 <__sinit>
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <_fflush_r+0x6c>)
 80012dc:	429c      	cmp	r4, r3
 80012de:	d11b      	bne.n	8001318 <_fflush_r+0x58>
 80012e0:	686c      	ldr	r4, [r5, #4]
 80012e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0ef      	beq.n	80012ca <_fflush_r+0xa>
 80012ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012ec:	07d0      	lsls	r0, r2, #31
 80012ee:	d404      	bmi.n	80012fa <_fflush_r+0x3a>
 80012f0:	0599      	lsls	r1, r3, #22
 80012f2:	d402      	bmi.n	80012fa <_fflush_r+0x3a>
 80012f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012f6:	f7ff fadd 	bl	80008b4 <__retarget_lock_acquire_recursive>
 80012fa:	4628      	mov	r0, r5
 80012fc:	4621      	mov	r1, r4
 80012fe:	f7ff ff59 	bl	80011b4 <__sflush_r>
 8001302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001304:	07da      	lsls	r2, r3, #31
 8001306:	4605      	mov	r5, r0
 8001308:	d4e0      	bmi.n	80012cc <_fflush_r+0xc>
 800130a:	89a3      	ldrh	r3, [r4, #12]
 800130c:	059b      	lsls	r3, r3, #22
 800130e:	d4dd      	bmi.n	80012cc <_fflush_r+0xc>
 8001310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001312:	f7ff fad0 	bl	80008b6 <__retarget_lock_release_recursive>
 8001316:	e7d9      	b.n	80012cc <_fflush_r+0xc>
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <_fflush_r+0x70>)
 800131a:	429c      	cmp	r4, r3
 800131c:	d101      	bne.n	8001322 <_fflush_r+0x62>
 800131e:	68ac      	ldr	r4, [r5, #8]
 8001320:	e7df      	b.n	80012e2 <_fflush_r+0x22>
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <_fflush_r+0x74>)
 8001324:	429c      	cmp	r4, r3
 8001326:	bf08      	it	eq
 8001328:	68ec      	ldreq	r4, [r5, #12]
 800132a:	e7da      	b.n	80012e2 <_fflush_r+0x22>
 800132c:	0800159c 	.word	0x0800159c
 8001330:	080015bc 	.word	0x080015bc
 8001334:	0800157c 	.word	0x0800157c

08001338 <_lseek_r>:
 8001338:	b538      	push	{r3, r4, r5, lr}
 800133a:	4d07      	ldr	r5, [pc, #28]	; (8001358 <_lseek_r+0x20>)
 800133c:	4604      	mov	r4, r0
 800133e:	4608      	mov	r0, r1
 8001340:	4611      	mov	r1, r2
 8001342:	2200      	movs	r2, #0
 8001344:	602a      	str	r2, [r5, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	f7ff f87e 	bl	8000448 <_lseek>
 800134c:	1c43      	adds	r3, r0, #1
 800134e:	d102      	bne.n	8001356 <_lseek_r+0x1e>
 8001350:	682b      	ldr	r3, [r5, #0]
 8001352:	b103      	cbz	r3, 8001356 <_lseek_r+0x1e>
 8001354:	6023      	str	r3, [r4, #0]
 8001356:	bd38      	pop	{r3, r4, r5, pc}
 8001358:	2000009c 	.word	0x2000009c

0800135c <__swhatbuf_r>:
 800135c:	b570      	push	{r4, r5, r6, lr}
 800135e:	460e      	mov	r6, r1
 8001360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001364:	2900      	cmp	r1, #0
 8001366:	b096      	sub	sp, #88	; 0x58
 8001368:	4614      	mov	r4, r2
 800136a:	461d      	mov	r5, r3
 800136c:	da07      	bge.n	800137e <__swhatbuf_r+0x22>
 800136e:	2300      	movs	r3, #0
 8001370:	602b      	str	r3, [r5, #0]
 8001372:	89b3      	ldrh	r3, [r6, #12]
 8001374:	061a      	lsls	r2, r3, #24
 8001376:	d410      	bmi.n	800139a <__swhatbuf_r+0x3e>
 8001378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800137c:	e00e      	b.n	800139c <__swhatbuf_r+0x40>
 800137e:	466a      	mov	r2, sp
 8001380:	f000 f8be 	bl	8001500 <_fstat_r>
 8001384:	2800      	cmp	r0, #0
 8001386:	dbf2      	blt.n	800136e <__swhatbuf_r+0x12>
 8001388:	9a01      	ldr	r2, [sp, #4]
 800138a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800138e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001392:	425a      	negs	r2, r3
 8001394:	415a      	adcs	r2, r3
 8001396:	602a      	str	r2, [r5, #0]
 8001398:	e7ee      	b.n	8001378 <__swhatbuf_r+0x1c>
 800139a:	2340      	movs	r3, #64	; 0x40
 800139c:	2000      	movs	r0, #0
 800139e:	6023      	str	r3, [r4, #0]
 80013a0:	b016      	add	sp, #88	; 0x58
 80013a2:	bd70      	pop	{r4, r5, r6, pc}

080013a4 <__smakebuf_r>:
 80013a4:	898b      	ldrh	r3, [r1, #12]
 80013a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013a8:	079d      	lsls	r5, r3, #30
 80013aa:	4606      	mov	r6, r0
 80013ac:	460c      	mov	r4, r1
 80013ae:	d507      	bpl.n	80013c0 <__smakebuf_r+0x1c>
 80013b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013b4:	6023      	str	r3, [r4, #0]
 80013b6:	6123      	str	r3, [r4, #16]
 80013b8:	2301      	movs	r3, #1
 80013ba:	6163      	str	r3, [r4, #20]
 80013bc:	b002      	add	sp, #8
 80013be:	bd70      	pop	{r4, r5, r6, pc}
 80013c0:	ab01      	add	r3, sp, #4
 80013c2:	466a      	mov	r2, sp
 80013c4:	f7ff ffca 	bl	800135c <__swhatbuf_r>
 80013c8:	9900      	ldr	r1, [sp, #0]
 80013ca:	4605      	mov	r5, r0
 80013cc:	4630      	mov	r0, r6
 80013ce:	f7ff fa73 	bl	80008b8 <_malloc_r>
 80013d2:	b948      	cbnz	r0, 80013e8 <__smakebuf_r+0x44>
 80013d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013d8:	059a      	lsls	r2, r3, #22
 80013da:	d4ef      	bmi.n	80013bc <__smakebuf_r+0x18>
 80013dc:	f023 0303 	bic.w	r3, r3, #3
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	81a3      	strh	r3, [r4, #12]
 80013e6:	e7e3      	b.n	80013b0 <__smakebuf_r+0xc>
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <__smakebuf_r+0x7c>)
 80013ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80013ec:	89a3      	ldrh	r3, [r4, #12]
 80013ee:	6020      	str	r0, [r4, #0]
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	81a3      	strh	r3, [r4, #12]
 80013f6:	9b00      	ldr	r3, [sp, #0]
 80013f8:	6163      	str	r3, [r4, #20]
 80013fa:	9b01      	ldr	r3, [sp, #4]
 80013fc:	6120      	str	r0, [r4, #16]
 80013fe:	b15b      	cbz	r3, 8001418 <__smakebuf_r+0x74>
 8001400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001404:	4630      	mov	r0, r6
 8001406:	f000 f88d 	bl	8001524 <_isatty_r>
 800140a:	b128      	cbz	r0, 8001418 <__smakebuf_r+0x74>
 800140c:	89a3      	ldrh	r3, [r4, #12]
 800140e:	f023 0303 	bic.w	r3, r3, #3
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	81a3      	strh	r3, [r4, #12]
 8001418:	89a0      	ldrh	r0, [r4, #12]
 800141a:	4305      	orrs	r5, r0
 800141c:	81a5      	strh	r5, [r4, #12]
 800141e:	e7cd      	b.n	80013bc <__smakebuf_r+0x18>
 8001420:	08000711 	.word	0x08000711

08001424 <__malloc_lock>:
 8001424:	4801      	ldr	r0, [pc, #4]	; (800142c <__malloc_lock+0x8>)
 8001426:	f7ff ba45 	b.w	80008b4 <__retarget_lock_acquire_recursive>
 800142a:	bf00      	nop
 800142c:	20000094 	.word	0x20000094

08001430 <__malloc_unlock>:
 8001430:	4801      	ldr	r0, [pc, #4]	; (8001438 <__malloc_unlock+0x8>)
 8001432:	f7ff ba40 	b.w	80008b6 <__retarget_lock_release_recursive>
 8001436:	bf00      	nop
 8001438:	20000094 	.word	0x20000094

0800143c <_free_r>:
 800143c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800143e:	2900      	cmp	r1, #0
 8001440:	d048      	beq.n	80014d4 <_free_r+0x98>
 8001442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001446:	9001      	str	r0, [sp, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f1a1 0404 	sub.w	r4, r1, #4
 800144e:	bfb8      	it	lt
 8001450:	18e4      	addlt	r4, r4, r3
 8001452:	f7ff ffe7 	bl	8001424 <__malloc_lock>
 8001456:	4a20      	ldr	r2, [pc, #128]	; (80014d8 <_free_r+0x9c>)
 8001458:	9801      	ldr	r0, [sp, #4]
 800145a:	6813      	ldr	r3, [r2, #0]
 800145c:	4615      	mov	r5, r2
 800145e:	b933      	cbnz	r3, 800146e <_free_r+0x32>
 8001460:	6063      	str	r3, [r4, #4]
 8001462:	6014      	str	r4, [r2, #0]
 8001464:	b003      	add	sp, #12
 8001466:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800146a:	f7ff bfe1 	b.w	8001430 <__malloc_unlock>
 800146e:	42a3      	cmp	r3, r4
 8001470:	d90b      	bls.n	800148a <_free_r+0x4e>
 8001472:	6821      	ldr	r1, [r4, #0]
 8001474:	1862      	adds	r2, r4, r1
 8001476:	4293      	cmp	r3, r2
 8001478:	bf04      	itt	eq
 800147a:	681a      	ldreq	r2, [r3, #0]
 800147c:	685b      	ldreq	r3, [r3, #4]
 800147e:	6063      	str	r3, [r4, #4]
 8001480:	bf04      	itt	eq
 8001482:	1852      	addeq	r2, r2, r1
 8001484:	6022      	streq	r2, [r4, #0]
 8001486:	602c      	str	r4, [r5, #0]
 8001488:	e7ec      	b.n	8001464 <_free_r+0x28>
 800148a:	461a      	mov	r2, r3
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	b10b      	cbz	r3, 8001494 <_free_r+0x58>
 8001490:	42a3      	cmp	r3, r4
 8001492:	d9fa      	bls.n	800148a <_free_r+0x4e>
 8001494:	6811      	ldr	r1, [r2, #0]
 8001496:	1855      	adds	r5, r2, r1
 8001498:	42a5      	cmp	r5, r4
 800149a:	d10b      	bne.n	80014b4 <_free_r+0x78>
 800149c:	6824      	ldr	r4, [r4, #0]
 800149e:	4421      	add	r1, r4
 80014a0:	1854      	adds	r4, r2, r1
 80014a2:	42a3      	cmp	r3, r4
 80014a4:	6011      	str	r1, [r2, #0]
 80014a6:	d1dd      	bne.n	8001464 <_free_r+0x28>
 80014a8:	681c      	ldr	r4, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	6053      	str	r3, [r2, #4]
 80014ae:	4421      	add	r1, r4
 80014b0:	6011      	str	r1, [r2, #0]
 80014b2:	e7d7      	b.n	8001464 <_free_r+0x28>
 80014b4:	d902      	bls.n	80014bc <_free_r+0x80>
 80014b6:	230c      	movs	r3, #12
 80014b8:	6003      	str	r3, [r0, #0]
 80014ba:	e7d3      	b.n	8001464 <_free_r+0x28>
 80014bc:	6825      	ldr	r5, [r4, #0]
 80014be:	1961      	adds	r1, r4, r5
 80014c0:	428b      	cmp	r3, r1
 80014c2:	bf04      	itt	eq
 80014c4:	6819      	ldreq	r1, [r3, #0]
 80014c6:	685b      	ldreq	r3, [r3, #4]
 80014c8:	6063      	str	r3, [r4, #4]
 80014ca:	bf04      	itt	eq
 80014cc:	1949      	addeq	r1, r1, r5
 80014ce:	6021      	streq	r1, [r4, #0]
 80014d0:	6054      	str	r4, [r2, #4]
 80014d2:	e7c7      	b.n	8001464 <_free_r+0x28>
 80014d4:	b003      	add	sp, #12
 80014d6:	bd30      	pop	{r4, r5, pc}
 80014d8:	20000084 	.word	0x20000084

080014dc <_read_r>:
 80014dc:	b538      	push	{r3, r4, r5, lr}
 80014de:	4d07      	ldr	r5, [pc, #28]	; (80014fc <_read_r+0x20>)
 80014e0:	4604      	mov	r4, r0
 80014e2:	4608      	mov	r0, r1
 80014e4:	4611      	mov	r1, r2
 80014e6:	2200      	movs	r2, #0
 80014e8:	602a      	str	r2, [r5, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	f7fe ff4c 	bl	8000388 <_read>
 80014f0:	1c43      	adds	r3, r0, #1
 80014f2:	d102      	bne.n	80014fa <_read_r+0x1e>
 80014f4:	682b      	ldr	r3, [r5, #0]
 80014f6:	b103      	cbz	r3, 80014fa <_read_r+0x1e>
 80014f8:	6023      	str	r3, [r4, #0]
 80014fa:	bd38      	pop	{r3, r4, r5, pc}
 80014fc:	2000009c 	.word	0x2000009c

08001500 <_fstat_r>:
 8001500:	b538      	push	{r3, r4, r5, lr}
 8001502:	4d07      	ldr	r5, [pc, #28]	; (8001520 <_fstat_r+0x20>)
 8001504:	2300      	movs	r3, #0
 8001506:	4604      	mov	r4, r0
 8001508:	4608      	mov	r0, r1
 800150a:	4611      	mov	r1, r2
 800150c:	602b      	str	r3, [r5, #0]
 800150e:	f7fe ff80 	bl	8000412 <_fstat>
 8001512:	1c43      	adds	r3, r0, #1
 8001514:	d102      	bne.n	800151c <_fstat_r+0x1c>
 8001516:	682b      	ldr	r3, [r5, #0]
 8001518:	b103      	cbz	r3, 800151c <_fstat_r+0x1c>
 800151a:	6023      	str	r3, [r4, #0]
 800151c:	bd38      	pop	{r3, r4, r5, pc}
 800151e:	bf00      	nop
 8001520:	2000009c 	.word	0x2000009c

08001524 <_isatty_r>:
 8001524:	b538      	push	{r3, r4, r5, lr}
 8001526:	4d06      	ldr	r5, [pc, #24]	; (8001540 <_isatty_r+0x1c>)
 8001528:	2300      	movs	r3, #0
 800152a:	4604      	mov	r4, r0
 800152c:	4608      	mov	r0, r1
 800152e:	602b      	str	r3, [r5, #0]
 8001530:	f7fe ff7f 	bl	8000432 <_isatty>
 8001534:	1c43      	adds	r3, r0, #1
 8001536:	d102      	bne.n	800153e <_isatty_r+0x1a>
 8001538:	682b      	ldr	r3, [r5, #0]
 800153a:	b103      	cbz	r3, 800153e <_isatty_r+0x1a>
 800153c:	6023      	str	r3, [r4, #0]
 800153e:	bd38      	pop	{r3, r4, r5, pc}
 8001540:	2000009c 	.word	0x2000009c

08001544 <_init>:
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001546:	bf00      	nop
 8001548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154a:	bc08      	pop	{r3}
 800154c:	469e      	mov	lr, r3
 800154e:	4770      	bx	lr

08001550 <_fini>:
 8001550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001552:	bf00      	nop
 8001554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001556:	bc08      	pop	{r3}
 8001558:	469e      	mov	lr, r3
 800155a:	4770      	bx	lr
