
07_usart_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cfc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08000ec0  08000ec0  00010ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f34  08000f34  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000f34  08000f34  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f34  08000f34  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f34  08000f34  00010f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f38  08000f38  00010f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  08000fa0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08000fa0  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000027ed  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006ab  00000000  00000000  00022881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00022f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000100  00000000  00000000  00023068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9d5  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000150a  00000000  00000000  0003db3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090534  00000000  00000000  0003f047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf57b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a88  00000000  00000000  000cf5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ea8 	.word	0x08000ea8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08000ea8 	.word	0x08000ea8

08000204 <__io_putchar>:
static void setBaudrate(USART_TypeDef *USARTx, uint32_t PeriphClock, uint32_t Baudrate);
static uint16_t compute_uart_baudrate(uint32_t PeriphClock, uint32_t Baudrate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800020c:	6878      	ldr	r0, [r7, #4]
 800020e:	f000 f843 	bl	8000298 <uart2_write>
	return ch;
 8000212:	687b      	ldr	r3, [r7, #4]
}
 8000214:	4618      	mov	r0, r3
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <main>:

int main()
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	usart2_tx_init();
 8000220:	f000 f806 	bl	8000230 <usart2_tx_init>
	while(1)
	{
		printf("Hello Chaitra\r\n");
 8000224:	4801      	ldr	r0, [pc, #4]	; (800022c <main+0x10>)
 8000226:	f000 f9e7 	bl	80005f8 <puts>
 800022a:	e7fb      	b.n	8000224 <main+0x8>
 800022c:	08000ec0 	.word	0x08000ec0

08000230 <usart2_tx_init>:
	return 0;
}


void usart2_tx_init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0

	// enable clock for GPIO and USART
	RCC->AHB1ENR |= GPIOA_ENA;
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <usart2_tx_init+0x58>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <usart2_tx_init+0x58>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= USART2ENA;
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <usart2_tx_init+0x58>)
 8000242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000244:	4a10      	ldr	r2, [pc, #64]	; (8000288 <usart2_tx_init+0x58>)
 8000246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800024a:	6413      	str	r3, [r2, #64]	; 0x40

	//set alternate function
	GPIOA->MODER |= (2U<<4);
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <usart2_tx_init+0x5c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a0e      	ldr	r2, [pc, #56]	; (800028c <usart2_tx_init+0x5c>)
 8000252:	f043 0320 	orr.w	r3, r3, #32
 8000256:	6013      	str	r3, [r2, #0]

	//set alternate function type
	GPIOA->AFR[0] |= (7U<<8);
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <usart2_tx_init+0x5c>)
 800025a:	6a1b      	ldr	r3, [r3, #32]
 800025c:	4a0b      	ldr	r2, [pc, #44]	; (800028c <usart2_tx_init+0x5c>)
 800025e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000262:	6213      	str	r3, [r2, #32]

	//Configure Baud rate
	setBaudrate(USART2, SYS_FREQ, USARt_BAUDRATE);
 8000264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000268:	4909      	ldr	r1, [pc, #36]	; (8000290 <usart2_tx_init+0x60>)
 800026a:	480a      	ldr	r0, [pc, #40]	; (8000294 <usart2_tx_init+0x64>)
 800026c:	f000 f82e 	bl	80002cc <setBaudrate>

	//set the transfer direction
	USART2->CR1 = (1U<<3);
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <usart2_tx_init+0x64>)
 8000272:	2208      	movs	r2, #8
 8000274:	60da      	str	r2, [r3, #12]

	//enable module from control register
	USART2->CR1 |= (1U<<13);
 8000276:	4b07      	ldr	r3, [pc, #28]	; (8000294 <usart2_tx_init+0x64>)
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	4a06      	ldr	r2, [pc, #24]	; (8000294 <usart2_tx_init+0x64>)
 800027c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000280:	60d3      	str	r3, [r2, #12]


}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40023800 	.word	0x40023800
 800028c:	40020000 	.word	0x40020000
 8000290:	00f42400 	.word	0x00f42400
 8000294:	40004400 	.word	0x40004400

08000298 <uart2_write>:


void uart2_write(int ch)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	//Transmit data register is empty
	while(!(USART2->SR & (1U<<7)));
 80002a0:	bf00      	nop
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <uart2_write+0x30>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f9      	beq.n	80002a2 <uart2_write+0xa>

	//Write to transmit

	USART2->DR |= (ch & 0xFF);
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <uart2_write+0x30>)
 80002b0:	685a      	ldr	r2, [r3, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	4904      	ldr	r1, [pc, #16]	; (80002c8 <uart2_write+0x30>)
 80002b8:	4313      	orrs	r3, r2
 80002ba:	604b      	str	r3, [r1, #4]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	40004400 	.word	0x40004400

080002cc <setBaudrate>:

static void setBaudrate(USART_TypeDef *USARTx, uint32_t PeriphClock, uint32_t Baudrate)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	60b9      	str	r1, [r7, #8]
 80002d6:	607a      	str	r2, [r7, #4]
	USARTx->BRR |= compute_uart_baudrate(PeriphClock, Baudrate);
 80002d8:	6879      	ldr	r1, [r7, #4]
 80002da:	68b8      	ldr	r0, [r7, #8]
 80002dc:	f000 f80b 	bl	80002f6 <compute_uart_baudrate>
 80002e0:	4603      	mov	r3, r0
 80002e2:	461a      	mov	r2, r3
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	431a      	orrs	r2, r3
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	609a      	str	r2, [r3, #8]
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <compute_uart_baudrate>:

static uint16_t compute_uart_baudrate(uint32_t PeriphClock, uint32_t Baudrate)
{
 80002f6:	b480      	push	{r7}
 80002f8:	b083      	sub	sp, #12
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]
 80002fe:	6039      	str	r1, [r7, #0]
	return ((PeriphClock + (Baudrate/2U))/Baudrate);
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	085a      	lsrs	r2, r3, #1
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	441a      	add	r2, r3
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	fbb2 f3f3 	udiv	r3, r2, r3
 800030e:	b29b      	uxth	r3, r3
}
 8000310:	4618      	mov	r0, r3
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr

0800031c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]
 800032c:	e00a      	b.n	8000344 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800032e:	f3af 8000 	nop.w
 8000332:	4601      	mov	r1, r0
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	1c5a      	adds	r2, r3, #1
 8000338:	60ba      	str	r2, [r7, #8]
 800033a:	b2ca      	uxtb	r2, r1
 800033c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	3301      	adds	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	697a      	ldr	r2, [r7, #20]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	429a      	cmp	r2, r3
 800034a:	dbf0      	blt.n	800032e <_read+0x12>
	}

return len;
 800034c:	687b      	ldr	r3, [r7, #4]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	b086      	sub	sp, #24
 800035a:	af00      	add	r7, sp, #0
 800035c:	60f8      	str	r0, [r7, #12]
 800035e:	60b9      	str	r1, [r7, #8]
 8000360:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
 8000366:	e009      	b.n	800037c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	1c5a      	adds	r2, r3, #1
 800036c:	60ba      	str	r2, [r7, #8]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff47 	bl	8000204 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	3301      	adds	r3, #1
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	697a      	ldr	r2, [r7, #20]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	429a      	cmp	r2, r3
 8000382:	dbf1      	blt.n	8000368 <_write+0x12>
	}
	return len;
 8000384:	687b      	ldr	r3, [r7, #4]
}
 8000386:	4618      	mov	r0, r3
 8000388:	3718      	adds	r7, #24
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <_close>:

int _close(int file)
{
 800038e:	b480      	push	{r7}
 8000390:	b083      	sub	sp, #12
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
	return -1;
 8000396:	f04f 33ff 	mov.w	r3, #4294967295
}
 800039a:	4618      	mov	r0, r3
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
 80003ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003b6:	605a      	str	r2, [r3, #4]
	return 0;
 80003b8:	2300      	movs	r3, #0
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <_isatty>:

int _isatty(int file)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b083      	sub	sp, #12
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
	return 1;
 80003ce:	2301      	movs	r3, #1
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
	return 0;
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
	...

080003f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000400:	4a14      	ldr	r2, [pc, #80]	; (8000454 <_sbrk+0x5c>)
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <_sbrk+0x60>)
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <_sbrk+0x64>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d102      	bne.n	800041a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <_sbrk+0x64>)
 8000416:	4a12      	ldr	r2, [pc, #72]	; (8000460 <_sbrk+0x68>)
 8000418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <_sbrk+0x64>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4413      	add	r3, r2
 8000422:	693a      	ldr	r2, [r7, #16]
 8000424:	429a      	cmp	r2, r3
 8000426:	d207      	bcs.n	8000438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000428:	f000 f846 	bl	80004b8 <__errno>
 800042c:	4603      	mov	r3, r0
 800042e:	220c      	movs	r2, #12
 8000430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000432:	f04f 33ff 	mov.w	r3, #4294967295
 8000436:	e009      	b.n	800044c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <_sbrk+0x64>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <_sbrk+0x64>)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4413      	add	r3, r2
 8000446:	4a05      	ldr	r2, [pc, #20]	; (800045c <_sbrk+0x64>)
 8000448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800044a:	68fb      	ldr	r3, [r7, #12]
}
 800044c:	4618      	mov	r0, r3
 800044e:	3718      	adds	r7, #24
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20020000 	.word	0x20020000
 8000458:	00000400 	.word	0x00000400
 800045c:	20000080 	.word	0x20000080
 8000460:	200000a0 	.word	0x200000a0

08000464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000466:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000468:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800046c:	480c      	ldr	r0, [pc, #48]	; (80004a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800046e:	490d      	ldr	r1, [pc, #52]	; (80004a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <LoopForever+0xe>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000474:	e002      	b.n	800047c <LoopCopyDataInit>

08000476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047a:	3304      	adds	r3, #4

0800047c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800047c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000480:	d3f9      	bcc.n	8000476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000484:	4c0a      	ldr	r4, [pc, #40]	; (80004b0 <LoopForever+0x16>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000488:	e001      	b.n	800048e <LoopFillZerobss>

0800048a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800048c:	3204      	adds	r2, #4

0800048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000490:	d3fb      	bcc.n	800048a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000492:	f000 f817 	bl	80004c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000496:	f7ff fec1 	bl	800021c <main>

0800049a <LoopForever>:

LoopForever:
    b LoopForever
 800049a:	e7fe      	b.n	800049a <LoopForever>
  ldr   r0, =_estack
 800049c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80004a8:	08000f3c 	.word	0x08000f3c
  ldr r2, =_sbss
 80004ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80004b0:	2000009c 	.word	0x2000009c

080004b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC_IRQHandler>
	...

080004b8 <__errno>:
 80004b8:	4b01      	ldr	r3, [pc, #4]	; (80004c0 <__errno+0x8>)
 80004ba:	6818      	ldr	r0, [r3, #0]
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	20000000 	.word	0x20000000

080004c4 <__libc_init_array>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	4d0d      	ldr	r5, [pc, #52]	; (80004fc <__libc_init_array+0x38>)
 80004c8:	4c0d      	ldr	r4, [pc, #52]	; (8000500 <__libc_init_array+0x3c>)
 80004ca:	1b64      	subs	r4, r4, r5
 80004cc:	10a4      	asrs	r4, r4, #2
 80004ce:	2600      	movs	r6, #0
 80004d0:	42a6      	cmp	r6, r4
 80004d2:	d109      	bne.n	80004e8 <__libc_init_array+0x24>
 80004d4:	4d0b      	ldr	r5, [pc, #44]	; (8000504 <__libc_init_array+0x40>)
 80004d6:	4c0c      	ldr	r4, [pc, #48]	; (8000508 <__libc_init_array+0x44>)
 80004d8:	f000 fce6 	bl	8000ea8 <_init>
 80004dc:	1b64      	subs	r4, r4, r5
 80004de:	10a4      	asrs	r4, r4, #2
 80004e0:	2600      	movs	r6, #0
 80004e2:	42a6      	cmp	r6, r4
 80004e4:	d105      	bne.n	80004f2 <__libc_init_array+0x2e>
 80004e6:	bd70      	pop	{r4, r5, r6, pc}
 80004e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ec:	4798      	blx	r3
 80004ee:	3601      	adds	r6, #1
 80004f0:	e7ee      	b.n	80004d0 <__libc_init_array+0xc>
 80004f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f6:	4798      	blx	r3
 80004f8:	3601      	adds	r6, #1
 80004fa:	e7f2      	b.n	80004e2 <__libc_init_array+0x1e>
 80004fc:	08000f34 	.word	0x08000f34
 8000500:	08000f34 	.word	0x08000f34
 8000504:	08000f34 	.word	0x08000f34
 8000508:	08000f38 	.word	0x08000f38

0800050c <memset>:
 800050c:	4402      	add	r2, r0
 800050e:	4603      	mov	r3, r0
 8000510:	4293      	cmp	r3, r2
 8000512:	d100      	bne.n	8000516 <memset+0xa>
 8000514:	4770      	bx	lr
 8000516:	f803 1b01 	strb.w	r1, [r3], #1
 800051a:	e7f9      	b.n	8000510 <memset+0x4>

0800051c <_puts_r>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	460e      	mov	r6, r1
 8000520:	4605      	mov	r5, r0
 8000522:	b118      	cbz	r0, 800052c <_puts_r+0x10>
 8000524:	6983      	ldr	r3, [r0, #24]
 8000526:	b90b      	cbnz	r3, 800052c <_puts_r+0x10>
 8000528:	f000 fa48 	bl	80009bc <__sinit>
 800052c:	69ab      	ldr	r3, [r5, #24]
 800052e:	68ac      	ldr	r4, [r5, #8]
 8000530:	b913      	cbnz	r3, 8000538 <_puts_r+0x1c>
 8000532:	4628      	mov	r0, r5
 8000534:	f000 fa42 	bl	80009bc <__sinit>
 8000538:	4b2c      	ldr	r3, [pc, #176]	; (80005ec <_puts_r+0xd0>)
 800053a:	429c      	cmp	r4, r3
 800053c:	d120      	bne.n	8000580 <_puts_r+0x64>
 800053e:	686c      	ldr	r4, [r5, #4]
 8000540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000542:	07db      	lsls	r3, r3, #31
 8000544:	d405      	bmi.n	8000552 <_puts_r+0x36>
 8000546:	89a3      	ldrh	r3, [r4, #12]
 8000548:	0598      	lsls	r0, r3, #22
 800054a:	d402      	bmi.n	8000552 <_puts_r+0x36>
 800054c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800054e:	f000 fad3 	bl	8000af8 <__retarget_lock_acquire_recursive>
 8000552:	89a3      	ldrh	r3, [r4, #12]
 8000554:	0719      	lsls	r1, r3, #28
 8000556:	d51d      	bpl.n	8000594 <_puts_r+0x78>
 8000558:	6923      	ldr	r3, [r4, #16]
 800055a:	b1db      	cbz	r3, 8000594 <_puts_r+0x78>
 800055c:	3e01      	subs	r6, #1
 800055e:	68a3      	ldr	r3, [r4, #8]
 8000560:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000564:	3b01      	subs	r3, #1
 8000566:	60a3      	str	r3, [r4, #8]
 8000568:	bb39      	cbnz	r1, 80005ba <_puts_r+0x9e>
 800056a:	2b00      	cmp	r3, #0
 800056c:	da38      	bge.n	80005e0 <_puts_r+0xc4>
 800056e:	4622      	mov	r2, r4
 8000570:	210a      	movs	r1, #10
 8000572:	4628      	mov	r0, r5
 8000574:	f000 f848 	bl	8000608 <__swbuf_r>
 8000578:	3001      	adds	r0, #1
 800057a:	d011      	beq.n	80005a0 <_puts_r+0x84>
 800057c:	250a      	movs	r5, #10
 800057e:	e011      	b.n	80005a4 <_puts_r+0x88>
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <_puts_r+0xd4>)
 8000582:	429c      	cmp	r4, r3
 8000584:	d101      	bne.n	800058a <_puts_r+0x6e>
 8000586:	68ac      	ldr	r4, [r5, #8]
 8000588:	e7da      	b.n	8000540 <_puts_r+0x24>
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <_puts_r+0xd8>)
 800058c:	429c      	cmp	r4, r3
 800058e:	bf08      	it	eq
 8000590:	68ec      	ldreq	r4, [r5, #12]
 8000592:	e7d5      	b.n	8000540 <_puts_r+0x24>
 8000594:	4621      	mov	r1, r4
 8000596:	4628      	mov	r0, r5
 8000598:	f000 f888 	bl	80006ac <__swsetup_r>
 800059c:	2800      	cmp	r0, #0
 800059e:	d0dd      	beq.n	800055c <_puts_r+0x40>
 80005a0:	f04f 35ff 	mov.w	r5, #4294967295
 80005a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005a6:	07da      	lsls	r2, r3, #31
 80005a8:	d405      	bmi.n	80005b6 <_puts_r+0x9a>
 80005aa:	89a3      	ldrh	r3, [r4, #12]
 80005ac:	059b      	lsls	r3, r3, #22
 80005ae:	d402      	bmi.n	80005b6 <_puts_r+0x9a>
 80005b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005b2:	f000 faa2 	bl	8000afa <__retarget_lock_release_recursive>
 80005b6:	4628      	mov	r0, r5
 80005b8:	bd70      	pop	{r4, r5, r6, pc}
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	da04      	bge.n	80005c8 <_puts_r+0xac>
 80005be:	69a2      	ldr	r2, [r4, #24]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	dc06      	bgt.n	80005d2 <_puts_r+0xb6>
 80005c4:	290a      	cmp	r1, #10
 80005c6:	d004      	beq.n	80005d2 <_puts_r+0xb6>
 80005c8:	6823      	ldr	r3, [r4, #0]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	6022      	str	r2, [r4, #0]
 80005ce:	7019      	strb	r1, [r3, #0]
 80005d0:	e7c5      	b.n	800055e <_puts_r+0x42>
 80005d2:	4622      	mov	r2, r4
 80005d4:	4628      	mov	r0, r5
 80005d6:	f000 f817 	bl	8000608 <__swbuf_r>
 80005da:	3001      	adds	r0, #1
 80005dc:	d1bf      	bne.n	800055e <_puts_r+0x42>
 80005de:	e7df      	b.n	80005a0 <_puts_r+0x84>
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	250a      	movs	r5, #10
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	6022      	str	r2, [r4, #0]
 80005e8:	701d      	strb	r5, [r3, #0]
 80005ea:	e7db      	b.n	80005a4 <_puts_r+0x88>
 80005ec:	08000ef4 	.word	0x08000ef4
 80005f0:	08000f14 	.word	0x08000f14
 80005f4:	08000ed4 	.word	0x08000ed4

080005f8 <puts>:
 80005f8:	4b02      	ldr	r3, [pc, #8]	; (8000604 <puts+0xc>)
 80005fa:	4601      	mov	r1, r0
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	f7ff bf8d 	b.w	800051c <_puts_r>
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000

08000608 <__swbuf_r>:
 8000608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060a:	460e      	mov	r6, r1
 800060c:	4614      	mov	r4, r2
 800060e:	4605      	mov	r5, r0
 8000610:	b118      	cbz	r0, 800061a <__swbuf_r+0x12>
 8000612:	6983      	ldr	r3, [r0, #24]
 8000614:	b90b      	cbnz	r3, 800061a <__swbuf_r+0x12>
 8000616:	f000 f9d1 	bl	80009bc <__sinit>
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <__swbuf_r+0x98>)
 800061c:	429c      	cmp	r4, r3
 800061e:	d12b      	bne.n	8000678 <__swbuf_r+0x70>
 8000620:	686c      	ldr	r4, [r5, #4]
 8000622:	69a3      	ldr	r3, [r4, #24]
 8000624:	60a3      	str	r3, [r4, #8]
 8000626:	89a3      	ldrh	r3, [r4, #12]
 8000628:	071a      	lsls	r2, r3, #28
 800062a:	d52f      	bpl.n	800068c <__swbuf_r+0x84>
 800062c:	6923      	ldr	r3, [r4, #16]
 800062e:	b36b      	cbz	r3, 800068c <__swbuf_r+0x84>
 8000630:	6923      	ldr	r3, [r4, #16]
 8000632:	6820      	ldr	r0, [r4, #0]
 8000634:	1ac0      	subs	r0, r0, r3
 8000636:	6963      	ldr	r3, [r4, #20]
 8000638:	b2f6      	uxtb	r6, r6
 800063a:	4283      	cmp	r3, r0
 800063c:	4637      	mov	r7, r6
 800063e:	dc04      	bgt.n	800064a <__swbuf_r+0x42>
 8000640:	4621      	mov	r1, r4
 8000642:	4628      	mov	r0, r5
 8000644:	f000 f926 	bl	8000894 <_fflush_r>
 8000648:	bb30      	cbnz	r0, 8000698 <__swbuf_r+0x90>
 800064a:	68a3      	ldr	r3, [r4, #8]
 800064c:	3b01      	subs	r3, #1
 800064e:	60a3      	str	r3, [r4, #8]
 8000650:	6823      	ldr	r3, [r4, #0]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	6022      	str	r2, [r4, #0]
 8000656:	701e      	strb	r6, [r3, #0]
 8000658:	6963      	ldr	r3, [r4, #20]
 800065a:	3001      	adds	r0, #1
 800065c:	4283      	cmp	r3, r0
 800065e:	d004      	beq.n	800066a <__swbuf_r+0x62>
 8000660:	89a3      	ldrh	r3, [r4, #12]
 8000662:	07db      	lsls	r3, r3, #31
 8000664:	d506      	bpl.n	8000674 <__swbuf_r+0x6c>
 8000666:	2e0a      	cmp	r6, #10
 8000668:	d104      	bne.n	8000674 <__swbuf_r+0x6c>
 800066a:	4621      	mov	r1, r4
 800066c:	4628      	mov	r0, r5
 800066e:	f000 f911 	bl	8000894 <_fflush_r>
 8000672:	b988      	cbnz	r0, 8000698 <__swbuf_r+0x90>
 8000674:	4638      	mov	r0, r7
 8000676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <__swbuf_r+0x9c>)
 800067a:	429c      	cmp	r4, r3
 800067c:	d101      	bne.n	8000682 <__swbuf_r+0x7a>
 800067e:	68ac      	ldr	r4, [r5, #8]
 8000680:	e7cf      	b.n	8000622 <__swbuf_r+0x1a>
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <__swbuf_r+0xa0>)
 8000684:	429c      	cmp	r4, r3
 8000686:	bf08      	it	eq
 8000688:	68ec      	ldreq	r4, [r5, #12]
 800068a:	e7ca      	b.n	8000622 <__swbuf_r+0x1a>
 800068c:	4621      	mov	r1, r4
 800068e:	4628      	mov	r0, r5
 8000690:	f000 f80c 	bl	80006ac <__swsetup_r>
 8000694:	2800      	cmp	r0, #0
 8000696:	d0cb      	beq.n	8000630 <__swbuf_r+0x28>
 8000698:	f04f 37ff 	mov.w	r7, #4294967295
 800069c:	e7ea      	b.n	8000674 <__swbuf_r+0x6c>
 800069e:	bf00      	nop
 80006a0:	08000ef4 	.word	0x08000ef4
 80006a4:	08000f14 	.word	0x08000f14
 80006a8:	08000ed4 	.word	0x08000ed4

080006ac <__swsetup_r>:
 80006ac:	4b32      	ldr	r3, [pc, #200]	; (8000778 <__swsetup_r+0xcc>)
 80006ae:	b570      	push	{r4, r5, r6, lr}
 80006b0:	681d      	ldr	r5, [r3, #0]
 80006b2:	4606      	mov	r6, r0
 80006b4:	460c      	mov	r4, r1
 80006b6:	b125      	cbz	r5, 80006c2 <__swsetup_r+0x16>
 80006b8:	69ab      	ldr	r3, [r5, #24]
 80006ba:	b913      	cbnz	r3, 80006c2 <__swsetup_r+0x16>
 80006bc:	4628      	mov	r0, r5
 80006be:	f000 f97d 	bl	80009bc <__sinit>
 80006c2:	4b2e      	ldr	r3, [pc, #184]	; (800077c <__swsetup_r+0xd0>)
 80006c4:	429c      	cmp	r4, r3
 80006c6:	d10f      	bne.n	80006e8 <__swsetup_r+0x3c>
 80006c8:	686c      	ldr	r4, [r5, #4]
 80006ca:	89a3      	ldrh	r3, [r4, #12]
 80006cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80006d0:	0719      	lsls	r1, r3, #28
 80006d2:	d42c      	bmi.n	800072e <__swsetup_r+0x82>
 80006d4:	06dd      	lsls	r5, r3, #27
 80006d6:	d411      	bmi.n	80006fc <__swsetup_r+0x50>
 80006d8:	2309      	movs	r3, #9
 80006da:	6033      	str	r3, [r6, #0]
 80006dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80006e0:	81a3      	strh	r3, [r4, #12]
 80006e2:	f04f 30ff 	mov.w	r0, #4294967295
 80006e6:	e03e      	b.n	8000766 <__swsetup_r+0xba>
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <__swsetup_r+0xd4>)
 80006ea:	429c      	cmp	r4, r3
 80006ec:	d101      	bne.n	80006f2 <__swsetup_r+0x46>
 80006ee:	68ac      	ldr	r4, [r5, #8]
 80006f0:	e7eb      	b.n	80006ca <__swsetup_r+0x1e>
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <__swsetup_r+0xd8>)
 80006f4:	429c      	cmp	r4, r3
 80006f6:	bf08      	it	eq
 80006f8:	68ec      	ldreq	r4, [r5, #12]
 80006fa:	e7e6      	b.n	80006ca <__swsetup_r+0x1e>
 80006fc:	0758      	lsls	r0, r3, #29
 80006fe:	d512      	bpl.n	8000726 <__swsetup_r+0x7a>
 8000700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000702:	b141      	cbz	r1, 8000716 <__swsetup_r+0x6a>
 8000704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000708:	4299      	cmp	r1, r3
 800070a:	d002      	beq.n	8000712 <__swsetup_r+0x66>
 800070c:	4630      	mov	r0, r6
 800070e:	f000 fa59 	bl	8000bc4 <_free_r>
 8000712:	2300      	movs	r3, #0
 8000714:	6363      	str	r3, [r4, #52]	; 0x34
 8000716:	89a3      	ldrh	r3, [r4, #12]
 8000718:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800071c:	81a3      	strh	r3, [r4, #12]
 800071e:	2300      	movs	r3, #0
 8000720:	6063      	str	r3, [r4, #4]
 8000722:	6923      	ldr	r3, [r4, #16]
 8000724:	6023      	str	r3, [r4, #0]
 8000726:	89a3      	ldrh	r3, [r4, #12]
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	81a3      	strh	r3, [r4, #12]
 800072e:	6923      	ldr	r3, [r4, #16]
 8000730:	b94b      	cbnz	r3, 8000746 <__swsetup_r+0x9a>
 8000732:	89a3      	ldrh	r3, [r4, #12]
 8000734:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800073c:	d003      	beq.n	8000746 <__swsetup_r+0x9a>
 800073e:	4621      	mov	r1, r4
 8000740:	4630      	mov	r0, r6
 8000742:	f000 f9ff 	bl	8000b44 <__smakebuf_r>
 8000746:	89a0      	ldrh	r0, [r4, #12]
 8000748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800074c:	f010 0301 	ands.w	r3, r0, #1
 8000750:	d00a      	beq.n	8000768 <__swsetup_r+0xbc>
 8000752:	2300      	movs	r3, #0
 8000754:	60a3      	str	r3, [r4, #8]
 8000756:	6963      	ldr	r3, [r4, #20]
 8000758:	425b      	negs	r3, r3
 800075a:	61a3      	str	r3, [r4, #24]
 800075c:	6923      	ldr	r3, [r4, #16]
 800075e:	b943      	cbnz	r3, 8000772 <__swsetup_r+0xc6>
 8000760:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000764:	d1ba      	bne.n	80006dc <__swsetup_r+0x30>
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	0781      	lsls	r1, r0, #30
 800076a:	bf58      	it	pl
 800076c:	6963      	ldrpl	r3, [r4, #20]
 800076e:	60a3      	str	r3, [r4, #8]
 8000770:	e7f4      	b.n	800075c <__swsetup_r+0xb0>
 8000772:	2000      	movs	r0, #0
 8000774:	e7f7      	b.n	8000766 <__swsetup_r+0xba>
 8000776:	bf00      	nop
 8000778:	20000000 	.word	0x20000000
 800077c:	08000ef4 	.word	0x08000ef4
 8000780:	08000f14 	.word	0x08000f14
 8000784:	08000ed4 	.word	0x08000ed4

08000788 <__sflush_r>:
 8000788:	898a      	ldrh	r2, [r1, #12]
 800078a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800078e:	4605      	mov	r5, r0
 8000790:	0710      	lsls	r0, r2, #28
 8000792:	460c      	mov	r4, r1
 8000794:	d458      	bmi.n	8000848 <__sflush_r+0xc0>
 8000796:	684b      	ldr	r3, [r1, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	dc05      	bgt.n	80007a8 <__sflush_r+0x20>
 800079c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800079e:	2b00      	cmp	r3, #0
 80007a0:	dc02      	bgt.n	80007a8 <__sflush_r+0x20>
 80007a2:	2000      	movs	r0, #0
 80007a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d0f9      	beq.n	80007a2 <__sflush_r+0x1a>
 80007ae:	2300      	movs	r3, #0
 80007b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80007b4:	682f      	ldr	r7, [r5, #0]
 80007b6:	602b      	str	r3, [r5, #0]
 80007b8:	d032      	beq.n	8000820 <__sflush_r+0x98>
 80007ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80007bc:	89a3      	ldrh	r3, [r4, #12]
 80007be:	075a      	lsls	r2, r3, #29
 80007c0:	d505      	bpl.n	80007ce <__sflush_r+0x46>
 80007c2:	6863      	ldr	r3, [r4, #4]
 80007c4:	1ac0      	subs	r0, r0, r3
 80007c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007c8:	b10b      	cbz	r3, 80007ce <__sflush_r+0x46>
 80007ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007cc:	1ac0      	subs	r0, r0, r3
 80007ce:	2300      	movs	r3, #0
 80007d0:	4602      	mov	r2, r0
 80007d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80007d4:	6a21      	ldr	r1, [r4, #32]
 80007d6:	4628      	mov	r0, r5
 80007d8:	47b0      	blx	r6
 80007da:	1c43      	adds	r3, r0, #1
 80007dc:	89a3      	ldrh	r3, [r4, #12]
 80007de:	d106      	bne.n	80007ee <__sflush_r+0x66>
 80007e0:	6829      	ldr	r1, [r5, #0]
 80007e2:	291d      	cmp	r1, #29
 80007e4:	d82c      	bhi.n	8000840 <__sflush_r+0xb8>
 80007e6:	4a2a      	ldr	r2, [pc, #168]	; (8000890 <__sflush_r+0x108>)
 80007e8:	40ca      	lsrs	r2, r1
 80007ea:	07d6      	lsls	r6, r2, #31
 80007ec:	d528      	bpl.n	8000840 <__sflush_r+0xb8>
 80007ee:	2200      	movs	r2, #0
 80007f0:	6062      	str	r2, [r4, #4]
 80007f2:	04d9      	lsls	r1, r3, #19
 80007f4:	6922      	ldr	r2, [r4, #16]
 80007f6:	6022      	str	r2, [r4, #0]
 80007f8:	d504      	bpl.n	8000804 <__sflush_r+0x7c>
 80007fa:	1c42      	adds	r2, r0, #1
 80007fc:	d101      	bne.n	8000802 <__sflush_r+0x7a>
 80007fe:	682b      	ldr	r3, [r5, #0]
 8000800:	b903      	cbnz	r3, 8000804 <__sflush_r+0x7c>
 8000802:	6560      	str	r0, [r4, #84]	; 0x54
 8000804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000806:	602f      	str	r7, [r5, #0]
 8000808:	2900      	cmp	r1, #0
 800080a:	d0ca      	beq.n	80007a2 <__sflush_r+0x1a>
 800080c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000810:	4299      	cmp	r1, r3
 8000812:	d002      	beq.n	800081a <__sflush_r+0x92>
 8000814:	4628      	mov	r0, r5
 8000816:	f000 f9d5 	bl	8000bc4 <_free_r>
 800081a:	2000      	movs	r0, #0
 800081c:	6360      	str	r0, [r4, #52]	; 0x34
 800081e:	e7c1      	b.n	80007a4 <__sflush_r+0x1c>
 8000820:	6a21      	ldr	r1, [r4, #32]
 8000822:	2301      	movs	r3, #1
 8000824:	4628      	mov	r0, r5
 8000826:	47b0      	blx	r6
 8000828:	1c41      	adds	r1, r0, #1
 800082a:	d1c7      	bne.n	80007bc <__sflush_r+0x34>
 800082c:	682b      	ldr	r3, [r5, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d0c4      	beq.n	80007bc <__sflush_r+0x34>
 8000832:	2b1d      	cmp	r3, #29
 8000834:	d001      	beq.n	800083a <__sflush_r+0xb2>
 8000836:	2b16      	cmp	r3, #22
 8000838:	d101      	bne.n	800083e <__sflush_r+0xb6>
 800083a:	602f      	str	r7, [r5, #0]
 800083c:	e7b1      	b.n	80007a2 <__sflush_r+0x1a>
 800083e:	89a3      	ldrh	r3, [r4, #12]
 8000840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000844:	81a3      	strh	r3, [r4, #12]
 8000846:	e7ad      	b.n	80007a4 <__sflush_r+0x1c>
 8000848:	690f      	ldr	r7, [r1, #16]
 800084a:	2f00      	cmp	r7, #0
 800084c:	d0a9      	beq.n	80007a2 <__sflush_r+0x1a>
 800084e:	0793      	lsls	r3, r2, #30
 8000850:	680e      	ldr	r6, [r1, #0]
 8000852:	bf08      	it	eq
 8000854:	694b      	ldreq	r3, [r1, #20]
 8000856:	600f      	str	r7, [r1, #0]
 8000858:	bf18      	it	ne
 800085a:	2300      	movne	r3, #0
 800085c:	eba6 0807 	sub.w	r8, r6, r7
 8000860:	608b      	str	r3, [r1, #8]
 8000862:	f1b8 0f00 	cmp.w	r8, #0
 8000866:	dd9c      	ble.n	80007a2 <__sflush_r+0x1a>
 8000868:	6a21      	ldr	r1, [r4, #32]
 800086a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800086c:	4643      	mov	r3, r8
 800086e:	463a      	mov	r2, r7
 8000870:	4628      	mov	r0, r5
 8000872:	47b0      	blx	r6
 8000874:	2800      	cmp	r0, #0
 8000876:	dc06      	bgt.n	8000886 <__sflush_r+0xfe>
 8000878:	89a3      	ldrh	r3, [r4, #12]
 800087a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800087e:	81a3      	strh	r3, [r4, #12]
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	e78e      	b.n	80007a4 <__sflush_r+0x1c>
 8000886:	4407      	add	r7, r0
 8000888:	eba8 0800 	sub.w	r8, r8, r0
 800088c:	e7e9      	b.n	8000862 <__sflush_r+0xda>
 800088e:	bf00      	nop
 8000890:	20400001 	.word	0x20400001

08000894 <_fflush_r>:
 8000894:	b538      	push	{r3, r4, r5, lr}
 8000896:	690b      	ldr	r3, [r1, #16]
 8000898:	4605      	mov	r5, r0
 800089a:	460c      	mov	r4, r1
 800089c:	b913      	cbnz	r3, 80008a4 <_fflush_r+0x10>
 800089e:	2500      	movs	r5, #0
 80008a0:	4628      	mov	r0, r5
 80008a2:	bd38      	pop	{r3, r4, r5, pc}
 80008a4:	b118      	cbz	r0, 80008ae <_fflush_r+0x1a>
 80008a6:	6983      	ldr	r3, [r0, #24]
 80008a8:	b90b      	cbnz	r3, 80008ae <_fflush_r+0x1a>
 80008aa:	f000 f887 	bl	80009bc <__sinit>
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <_fflush_r+0x6c>)
 80008b0:	429c      	cmp	r4, r3
 80008b2:	d11b      	bne.n	80008ec <_fflush_r+0x58>
 80008b4:	686c      	ldr	r4, [r5, #4]
 80008b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0ef      	beq.n	800089e <_fflush_r+0xa>
 80008be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80008c0:	07d0      	lsls	r0, r2, #31
 80008c2:	d404      	bmi.n	80008ce <_fflush_r+0x3a>
 80008c4:	0599      	lsls	r1, r3, #22
 80008c6:	d402      	bmi.n	80008ce <_fflush_r+0x3a>
 80008c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008ca:	f000 f915 	bl	8000af8 <__retarget_lock_acquire_recursive>
 80008ce:	4628      	mov	r0, r5
 80008d0:	4621      	mov	r1, r4
 80008d2:	f7ff ff59 	bl	8000788 <__sflush_r>
 80008d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008d8:	07da      	lsls	r2, r3, #31
 80008da:	4605      	mov	r5, r0
 80008dc:	d4e0      	bmi.n	80008a0 <_fflush_r+0xc>
 80008de:	89a3      	ldrh	r3, [r4, #12]
 80008e0:	059b      	lsls	r3, r3, #22
 80008e2:	d4dd      	bmi.n	80008a0 <_fflush_r+0xc>
 80008e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008e6:	f000 f908 	bl	8000afa <__retarget_lock_release_recursive>
 80008ea:	e7d9      	b.n	80008a0 <_fflush_r+0xc>
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <_fflush_r+0x70>)
 80008ee:	429c      	cmp	r4, r3
 80008f0:	d101      	bne.n	80008f6 <_fflush_r+0x62>
 80008f2:	68ac      	ldr	r4, [r5, #8]
 80008f4:	e7df      	b.n	80008b6 <_fflush_r+0x22>
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <_fflush_r+0x74>)
 80008f8:	429c      	cmp	r4, r3
 80008fa:	bf08      	it	eq
 80008fc:	68ec      	ldreq	r4, [r5, #12]
 80008fe:	e7da      	b.n	80008b6 <_fflush_r+0x22>
 8000900:	08000ef4 	.word	0x08000ef4
 8000904:	08000f14 	.word	0x08000f14
 8000908:	08000ed4 	.word	0x08000ed4

0800090c <std>:
 800090c:	2300      	movs	r3, #0
 800090e:	b510      	push	{r4, lr}
 8000910:	4604      	mov	r4, r0
 8000912:	e9c0 3300 	strd	r3, r3, [r0]
 8000916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800091a:	6083      	str	r3, [r0, #8]
 800091c:	8181      	strh	r1, [r0, #12]
 800091e:	6643      	str	r3, [r0, #100]	; 0x64
 8000920:	81c2      	strh	r2, [r0, #14]
 8000922:	6183      	str	r3, [r0, #24]
 8000924:	4619      	mov	r1, r3
 8000926:	2208      	movs	r2, #8
 8000928:	305c      	adds	r0, #92	; 0x5c
 800092a:	f7ff fdef 	bl	800050c <memset>
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <std+0x38>)
 8000930:	6263      	str	r3, [r4, #36]	; 0x24
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <std+0x3c>)
 8000934:	62a3      	str	r3, [r4, #40]	; 0x28
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <std+0x40>)
 8000938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <std+0x44>)
 800093c:	6224      	str	r4, [r4, #32]
 800093e:	6323      	str	r3, [r4, #48]	; 0x30
 8000940:	bd10      	pop	{r4, pc}
 8000942:	bf00      	nop
 8000944:	08000d39 	.word	0x08000d39
 8000948:	08000d5b 	.word	0x08000d5b
 800094c:	08000d93 	.word	0x08000d93
 8000950:	08000db7 	.word	0x08000db7

08000954 <_cleanup_r>:
 8000954:	4901      	ldr	r1, [pc, #4]	; (800095c <_cleanup_r+0x8>)
 8000956:	f000 b8af 	b.w	8000ab8 <_fwalk_reent>
 800095a:	bf00      	nop
 800095c:	08000895 	.word	0x08000895

08000960 <__sfmoreglue>:
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	1e4a      	subs	r2, r1, #1
 8000964:	2568      	movs	r5, #104	; 0x68
 8000966:	4355      	muls	r5, r2
 8000968:	460e      	mov	r6, r1
 800096a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800096e:	f000 f979 	bl	8000c64 <_malloc_r>
 8000972:	4604      	mov	r4, r0
 8000974:	b140      	cbz	r0, 8000988 <__sfmoreglue+0x28>
 8000976:	2100      	movs	r1, #0
 8000978:	e9c0 1600 	strd	r1, r6, [r0]
 800097c:	300c      	adds	r0, #12
 800097e:	60a0      	str	r0, [r4, #8]
 8000980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000984:	f7ff fdc2 	bl	800050c <memset>
 8000988:	4620      	mov	r0, r4
 800098a:	bd70      	pop	{r4, r5, r6, pc}

0800098c <__sfp_lock_acquire>:
 800098c:	4801      	ldr	r0, [pc, #4]	; (8000994 <__sfp_lock_acquire+0x8>)
 800098e:	f000 b8b3 	b.w	8000af8 <__retarget_lock_acquire_recursive>
 8000992:	bf00      	nop
 8000994:	20000094 	.word	0x20000094

08000998 <__sfp_lock_release>:
 8000998:	4801      	ldr	r0, [pc, #4]	; (80009a0 <__sfp_lock_release+0x8>)
 800099a:	f000 b8ae 	b.w	8000afa <__retarget_lock_release_recursive>
 800099e:	bf00      	nop
 80009a0:	20000094 	.word	0x20000094

080009a4 <__sinit_lock_acquire>:
 80009a4:	4801      	ldr	r0, [pc, #4]	; (80009ac <__sinit_lock_acquire+0x8>)
 80009a6:	f000 b8a7 	b.w	8000af8 <__retarget_lock_acquire_recursive>
 80009aa:	bf00      	nop
 80009ac:	2000008f 	.word	0x2000008f

080009b0 <__sinit_lock_release>:
 80009b0:	4801      	ldr	r0, [pc, #4]	; (80009b8 <__sinit_lock_release+0x8>)
 80009b2:	f000 b8a2 	b.w	8000afa <__retarget_lock_release_recursive>
 80009b6:	bf00      	nop
 80009b8:	2000008f 	.word	0x2000008f

080009bc <__sinit>:
 80009bc:	b510      	push	{r4, lr}
 80009be:	4604      	mov	r4, r0
 80009c0:	f7ff fff0 	bl	80009a4 <__sinit_lock_acquire>
 80009c4:	69a3      	ldr	r3, [r4, #24]
 80009c6:	b11b      	cbz	r3, 80009d0 <__sinit+0x14>
 80009c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009cc:	f7ff bff0 	b.w	80009b0 <__sinit_lock_release>
 80009d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80009d4:	6523      	str	r3, [r4, #80]	; 0x50
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <__sinit+0x68>)
 80009d8:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <__sinit+0x6c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80009de:	42a3      	cmp	r3, r4
 80009e0:	bf04      	itt	eq
 80009e2:	2301      	moveq	r3, #1
 80009e4:	61a3      	streq	r3, [r4, #24]
 80009e6:	4620      	mov	r0, r4
 80009e8:	f000 f820 	bl	8000a2c <__sfp>
 80009ec:	6060      	str	r0, [r4, #4]
 80009ee:	4620      	mov	r0, r4
 80009f0:	f000 f81c 	bl	8000a2c <__sfp>
 80009f4:	60a0      	str	r0, [r4, #8]
 80009f6:	4620      	mov	r0, r4
 80009f8:	f000 f818 	bl	8000a2c <__sfp>
 80009fc:	2200      	movs	r2, #0
 80009fe:	60e0      	str	r0, [r4, #12]
 8000a00:	2104      	movs	r1, #4
 8000a02:	6860      	ldr	r0, [r4, #4]
 8000a04:	f7ff ff82 	bl	800090c <std>
 8000a08:	68a0      	ldr	r0, [r4, #8]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2109      	movs	r1, #9
 8000a0e:	f7ff ff7d 	bl	800090c <std>
 8000a12:	68e0      	ldr	r0, [r4, #12]
 8000a14:	2202      	movs	r2, #2
 8000a16:	2112      	movs	r1, #18
 8000a18:	f7ff ff78 	bl	800090c <std>
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61a3      	str	r3, [r4, #24]
 8000a20:	e7d2      	b.n	80009c8 <__sinit+0xc>
 8000a22:	bf00      	nop
 8000a24:	08000ed0 	.word	0x08000ed0
 8000a28:	08000955 	.word	0x08000955

08000a2c <__sfp>:
 8000a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2e:	4607      	mov	r7, r0
 8000a30:	f7ff ffac 	bl	800098c <__sfp_lock_acquire>
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <__sfp+0x84>)
 8000a36:	681e      	ldr	r6, [r3, #0]
 8000a38:	69b3      	ldr	r3, [r6, #24]
 8000a3a:	b913      	cbnz	r3, 8000a42 <__sfp+0x16>
 8000a3c:	4630      	mov	r0, r6
 8000a3e:	f7ff ffbd 	bl	80009bc <__sinit>
 8000a42:	3648      	adds	r6, #72	; 0x48
 8000a44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	d503      	bpl.n	8000a54 <__sfp+0x28>
 8000a4c:	6833      	ldr	r3, [r6, #0]
 8000a4e:	b30b      	cbz	r3, 8000a94 <__sfp+0x68>
 8000a50:	6836      	ldr	r6, [r6, #0]
 8000a52:	e7f7      	b.n	8000a44 <__sfp+0x18>
 8000a54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a58:	b9d5      	cbnz	r5, 8000a90 <__sfp+0x64>
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <__sfp+0x88>)
 8000a5c:	60e3      	str	r3, [r4, #12]
 8000a5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a62:	6665      	str	r5, [r4, #100]	; 0x64
 8000a64:	f000 f847 	bl	8000af6 <__retarget_lock_init_recursive>
 8000a68:	f7ff ff96 	bl	8000998 <__sfp_lock_release>
 8000a6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000a70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000a74:	6025      	str	r5, [r4, #0]
 8000a76:	61a5      	str	r5, [r4, #24]
 8000a78:	2208      	movs	r2, #8
 8000a7a:	4629      	mov	r1, r5
 8000a7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a80:	f7ff fd44 	bl	800050c <memset>
 8000a84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a90:	3468      	adds	r4, #104	; 0x68
 8000a92:	e7d9      	b.n	8000a48 <__sfp+0x1c>
 8000a94:	2104      	movs	r1, #4
 8000a96:	4638      	mov	r0, r7
 8000a98:	f7ff ff62 	bl	8000960 <__sfmoreglue>
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	6030      	str	r0, [r6, #0]
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	d1d5      	bne.n	8000a50 <__sfp+0x24>
 8000aa4:	f7ff ff78 	bl	8000998 <__sfp_lock_release>
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	e7ee      	b.n	8000a8c <__sfp+0x60>
 8000aae:	bf00      	nop
 8000ab0:	08000ed0 	.word	0x08000ed0
 8000ab4:	ffff0001 	.word	0xffff0001

08000ab8 <_fwalk_reent>:
 8000ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000abc:	4606      	mov	r6, r0
 8000abe:	4688      	mov	r8, r1
 8000ac0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000ac4:	2700      	movs	r7, #0
 8000ac6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000aca:	f1b9 0901 	subs.w	r9, r9, #1
 8000ace:	d505      	bpl.n	8000adc <_fwalk_reent+0x24>
 8000ad0:	6824      	ldr	r4, [r4, #0]
 8000ad2:	2c00      	cmp	r4, #0
 8000ad4:	d1f7      	bne.n	8000ac6 <_fwalk_reent+0xe>
 8000ad6:	4638      	mov	r0, r7
 8000ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000adc:	89ab      	ldrh	r3, [r5, #12]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d907      	bls.n	8000af2 <_fwalk_reent+0x3a>
 8000ae2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	d003      	beq.n	8000af2 <_fwalk_reent+0x3a>
 8000aea:	4629      	mov	r1, r5
 8000aec:	4630      	mov	r0, r6
 8000aee:	47c0      	blx	r8
 8000af0:	4307      	orrs	r7, r0
 8000af2:	3568      	adds	r5, #104	; 0x68
 8000af4:	e7e9      	b.n	8000aca <_fwalk_reent+0x12>

08000af6 <__retarget_lock_init_recursive>:
 8000af6:	4770      	bx	lr

08000af8 <__retarget_lock_acquire_recursive>:
 8000af8:	4770      	bx	lr

08000afa <__retarget_lock_release_recursive>:
 8000afa:	4770      	bx	lr

08000afc <__swhatbuf_r>:
 8000afc:	b570      	push	{r4, r5, r6, lr}
 8000afe:	460e      	mov	r6, r1
 8000b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b04:	2900      	cmp	r1, #0
 8000b06:	b096      	sub	sp, #88	; 0x58
 8000b08:	4614      	mov	r4, r2
 8000b0a:	461d      	mov	r5, r3
 8000b0c:	da07      	bge.n	8000b1e <__swhatbuf_r+0x22>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	602b      	str	r3, [r5, #0]
 8000b12:	89b3      	ldrh	r3, [r6, #12]
 8000b14:	061a      	lsls	r2, r3, #24
 8000b16:	d410      	bmi.n	8000b3a <__swhatbuf_r+0x3e>
 8000b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1c:	e00e      	b.n	8000b3c <__swhatbuf_r+0x40>
 8000b1e:	466a      	mov	r2, sp
 8000b20:	f000 f970 	bl	8000e04 <_fstat_r>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	dbf2      	blt.n	8000b0e <__swhatbuf_r+0x12>
 8000b28:	9a01      	ldr	r2, [sp, #4]
 8000b2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000b2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000b32:	425a      	negs	r2, r3
 8000b34:	415a      	adcs	r2, r3
 8000b36:	602a      	str	r2, [r5, #0]
 8000b38:	e7ee      	b.n	8000b18 <__swhatbuf_r+0x1c>
 8000b3a:	2340      	movs	r3, #64	; 0x40
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	6023      	str	r3, [r4, #0]
 8000b40:	b016      	add	sp, #88	; 0x58
 8000b42:	bd70      	pop	{r4, r5, r6, pc}

08000b44 <__smakebuf_r>:
 8000b44:	898b      	ldrh	r3, [r1, #12]
 8000b46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b48:	079d      	lsls	r5, r3, #30
 8000b4a:	4606      	mov	r6, r0
 8000b4c:	460c      	mov	r4, r1
 8000b4e:	d507      	bpl.n	8000b60 <__smakebuf_r+0x1c>
 8000b50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b54:	6023      	str	r3, [r4, #0]
 8000b56:	6123      	str	r3, [r4, #16]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	6163      	str	r3, [r4, #20]
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd70      	pop	{r4, r5, r6, pc}
 8000b60:	ab01      	add	r3, sp, #4
 8000b62:	466a      	mov	r2, sp
 8000b64:	f7ff ffca 	bl	8000afc <__swhatbuf_r>
 8000b68:	9900      	ldr	r1, [sp, #0]
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	f000 f879 	bl	8000c64 <_malloc_r>
 8000b72:	b948      	cbnz	r0, 8000b88 <__smakebuf_r+0x44>
 8000b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b78:	059a      	lsls	r2, r3, #22
 8000b7a:	d4ef      	bmi.n	8000b5c <__smakebuf_r+0x18>
 8000b7c:	f023 0303 	bic.w	r3, r3, #3
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	81a3      	strh	r3, [r4, #12]
 8000b86:	e7e3      	b.n	8000b50 <__smakebuf_r+0xc>
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <__smakebuf_r+0x7c>)
 8000b8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000b8c:	89a3      	ldrh	r3, [r4, #12]
 8000b8e:	6020      	str	r0, [r4, #0]
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	81a3      	strh	r3, [r4, #12]
 8000b96:	9b00      	ldr	r3, [sp, #0]
 8000b98:	6163      	str	r3, [r4, #20]
 8000b9a:	9b01      	ldr	r3, [sp, #4]
 8000b9c:	6120      	str	r0, [r4, #16]
 8000b9e:	b15b      	cbz	r3, 8000bb8 <__smakebuf_r+0x74>
 8000ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	f000 f93f 	bl	8000e28 <_isatty_r>
 8000baa:	b128      	cbz	r0, 8000bb8 <__smakebuf_r+0x74>
 8000bac:	89a3      	ldrh	r3, [r4, #12]
 8000bae:	f023 0303 	bic.w	r3, r3, #3
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	81a3      	strh	r3, [r4, #12]
 8000bb8:	89a0      	ldrh	r0, [r4, #12]
 8000bba:	4305      	orrs	r5, r0
 8000bbc:	81a5      	strh	r5, [r4, #12]
 8000bbe:	e7cd      	b.n	8000b5c <__smakebuf_r+0x18>
 8000bc0:	08000955 	.word	0x08000955

08000bc4 <_free_r>:
 8000bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000bc6:	2900      	cmp	r1, #0
 8000bc8:	d048      	beq.n	8000c5c <_free_r+0x98>
 8000bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bce:	9001      	str	r0, [sp, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8000bd6:	bfb8      	it	lt
 8000bd8:	18e4      	addlt	r4, r4, r3
 8000bda:	f000 f947 	bl	8000e6c <__malloc_lock>
 8000bde:	4a20      	ldr	r2, [pc, #128]	; (8000c60 <_free_r+0x9c>)
 8000be0:	9801      	ldr	r0, [sp, #4]
 8000be2:	6813      	ldr	r3, [r2, #0]
 8000be4:	4615      	mov	r5, r2
 8000be6:	b933      	cbnz	r3, 8000bf6 <_free_r+0x32>
 8000be8:	6063      	str	r3, [r4, #4]
 8000bea:	6014      	str	r4, [r2, #0]
 8000bec:	b003      	add	sp, #12
 8000bee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000bf2:	f000 b941 	b.w	8000e78 <__malloc_unlock>
 8000bf6:	42a3      	cmp	r3, r4
 8000bf8:	d90b      	bls.n	8000c12 <_free_r+0x4e>
 8000bfa:	6821      	ldr	r1, [r4, #0]
 8000bfc:	1862      	adds	r2, r4, r1
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	bf04      	itt	eq
 8000c02:	681a      	ldreq	r2, [r3, #0]
 8000c04:	685b      	ldreq	r3, [r3, #4]
 8000c06:	6063      	str	r3, [r4, #4]
 8000c08:	bf04      	itt	eq
 8000c0a:	1852      	addeq	r2, r2, r1
 8000c0c:	6022      	streq	r2, [r4, #0]
 8000c0e:	602c      	str	r4, [r5, #0]
 8000c10:	e7ec      	b.n	8000bec <_free_r+0x28>
 8000c12:	461a      	mov	r2, r3
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	b10b      	cbz	r3, 8000c1c <_free_r+0x58>
 8000c18:	42a3      	cmp	r3, r4
 8000c1a:	d9fa      	bls.n	8000c12 <_free_r+0x4e>
 8000c1c:	6811      	ldr	r1, [r2, #0]
 8000c1e:	1855      	adds	r5, r2, r1
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	d10b      	bne.n	8000c3c <_free_r+0x78>
 8000c24:	6824      	ldr	r4, [r4, #0]
 8000c26:	4421      	add	r1, r4
 8000c28:	1854      	adds	r4, r2, r1
 8000c2a:	42a3      	cmp	r3, r4
 8000c2c:	6011      	str	r1, [r2, #0]
 8000c2e:	d1dd      	bne.n	8000bec <_free_r+0x28>
 8000c30:	681c      	ldr	r4, [r3, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	6053      	str	r3, [r2, #4]
 8000c36:	4421      	add	r1, r4
 8000c38:	6011      	str	r1, [r2, #0]
 8000c3a:	e7d7      	b.n	8000bec <_free_r+0x28>
 8000c3c:	d902      	bls.n	8000c44 <_free_r+0x80>
 8000c3e:	230c      	movs	r3, #12
 8000c40:	6003      	str	r3, [r0, #0]
 8000c42:	e7d3      	b.n	8000bec <_free_r+0x28>
 8000c44:	6825      	ldr	r5, [r4, #0]
 8000c46:	1961      	adds	r1, r4, r5
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	bf04      	itt	eq
 8000c4c:	6819      	ldreq	r1, [r3, #0]
 8000c4e:	685b      	ldreq	r3, [r3, #4]
 8000c50:	6063      	str	r3, [r4, #4]
 8000c52:	bf04      	itt	eq
 8000c54:	1949      	addeq	r1, r1, r5
 8000c56:	6021      	streq	r1, [r4, #0]
 8000c58:	6054      	str	r4, [r2, #4]
 8000c5a:	e7c7      	b.n	8000bec <_free_r+0x28>
 8000c5c:	b003      	add	sp, #12
 8000c5e:	bd30      	pop	{r4, r5, pc}
 8000c60:	20000084 	.word	0x20000084

08000c64 <_malloc_r>:
 8000c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c66:	1ccd      	adds	r5, r1, #3
 8000c68:	f025 0503 	bic.w	r5, r5, #3
 8000c6c:	3508      	adds	r5, #8
 8000c6e:	2d0c      	cmp	r5, #12
 8000c70:	bf38      	it	cc
 8000c72:	250c      	movcc	r5, #12
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	4606      	mov	r6, r0
 8000c78:	db01      	blt.n	8000c7e <_malloc_r+0x1a>
 8000c7a:	42a9      	cmp	r1, r5
 8000c7c:	d903      	bls.n	8000c86 <_malloc_r+0x22>
 8000c7e:	230c      	movs	r3, #12
 8000c80:	6033      	str	r3, [r6, #0]
 8000c82:	2000      	movs	r0, #0
 8000c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c86:	f000 f8f1 	bl	8000e6c <__malloc_lock>
 8000c8a:	4921      	ldr	r1, [pc, #132]	; (8000d10 <_malloc_r+0xac>)
 8000c8c:	680a      	ldr	r2, [r1, #0]
 8000c8e:	4614      	mov	r4, r2
 8000c90:	b99c      	cbnz	r4, 8000cba <_malloc_r+0x56>
 8000c92:	4f20      	ldr	r7, [pc, #128]	; (8000d14 <_malloc_r+0xb0>)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	b923      	cbnz	r3, 8000ca2 <_malloc_r+0x3e>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	f000 f83c 	bl	8000d18 <_sbrk_r>
 8000ca0:	6038      	str	r0, [r7, #0]
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	f000 f837 	bl	8000d18 <_sbrk_r>
 8000caa:	1c43      	adds	r3, r0, #1
 8000cac:	d123      	bne.n	8000cf6 <_malloc_r+0x92>
 8000cae:	230c      	movs	r3, #12
 8000cb0:	6033      	str	r3, [r6, #0]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	f000 f8e0 	bl	8000e78 <__malloc_unlock>
 8000cb8:	e7e3      	b.n	8000c82 <_malloc_r+0x1e>
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	1b5b      	subs	r3, r3, r5
 8000cbe:	d417      	bmi.n	8000cf0 <_malloc_r+0x8c>
 8000cc0:	2b0b      	cmp	r3, #11
 8000cc2:	d903      	bls.n	8000ccc <_malloc_r+0x68>
 8000cc4:	6023      	str	r3, [r4, #0]
 8000cc6:	441c      	add	r4, r3
 8000cc8:	6025      	str	r5, [r4, #0]
 8000cca:	e004      	b.n	8000cd6 <_malloc_r+0x72>
 8000ccc:	6863      	ldr	r3, [r4, #4]
 8000cce:	42a2      	cmp	r2, r4
 8000cd0:	bf0c      	ite	eq
 8000cd2:	600b      	streq	r3, [r1, #0]
 8000cd4:	6053      	strne	r3, [r2, #4]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	f000 f8ce 	bl	8000e78 <__malloc_unlock>
 8000cdc:	f104 000b 	add.w	r0, r4, #11
 8000ce0:	1d23      	adds	r3, r4, #4
 8000ce2:	f020 0007 	bic.w	r0, r0, #7
 8000ce6:	1ac2      	subs	r2, r0, r3
 8000ce8:	d0cc      	beq.n	8000c84 <_malloc_r+0x20>
 8000cea:	1a1b      	subs	r3, r3, r0
 8000cec:	50a3      	str	r3, [r4, r2]
 8000cee:	e7c9      	b.n	8000c84 <_malloc_r+0x20>
 8000cf0:	4622      	mov	r2, r4
 8000cf2:	6864      	ldr	r4, [r4, #4]
 8000cf4:	e7cc      	b.n	8000c90 <_malloc_r+0x2c>
 8000cf6:	1cc4      	adds	r4, r0, #3
 8000cf8:	f024 0403 	bic.w	r4, r4, #3
 8000cfc:	42a0      	cmp	r0, r4
 8000cfe:	d0e3      	beq.n	8000cc8 <_malloc_r+0x64>
 8000d00:	1a21      	subs	r1, r4, r0
 8000d02:	4630      	mov	r0, r6
 8000d04:	f000 f808 	bl	8000d18 <_sbrk_r>
 8000d08:	3001      	adds	r0, #1
 8000d0a:	d1dd      	bne.n	8000cc8 <_malloc_r+0x64>
 8000d0c:	e7cf      	b.n	8000cae <_malloc_r+0x4a>
 8000d0e:	bf00      	nop
 8000d10:	20000084 	.word	0x20000084
 8000d14:	20000088 	.word	0x20000088

08000d18 <_sbrk_r>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	4d06      	ldr	r5, [pc, #24]	; (8000d34 <_sbrk_r+0x1c>)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	4608      	mov	r0, r1
 8000d22:	602b      	str	r3, [r5, #0]
 8000d24:	f7ff fb68 	bl	80003f8 <_sbrk>
 8000d28:	1c43      	adds	r3, r0, #1
 8000d2a:	d102      	bne.n	8000d32 <_sbrk_r+0x1a>
 8000d2c:	682b      	ldr	r3, [r5, #0]
 8000d2e:	b103      	cbz	r3, 8000d32 <_sbrk_r+0x1a>
 8000d30:	6023      	str	r3, [r4, #0]
 8000d32:	bd38      	pop	{r3, r4, r5, pc}
 8000d34:	20000098 	.word	0x20000098

08000d38 <__sread>:
 8000d38:	b510      	push	{r4, lr}
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d40:	f000 f8a0 	bl	8000e84 <_read_r>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	bfab      	itete	ge
 8000d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8000d4c:	181b      	addge	r3, r3, r0
 8000d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000d52:	bfac      	ite	ge
 8000d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8000d56:	81a3      	strhlt	r3, [r4, #12]
 8000d58:	bd10      	pop	{r4, pc}

08000d5a <__swrite>:
 8000d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d5e:	461f      	mov	r7, r3
 8000d60:	898b      	ldrh	r3, [r1, #12]
 8000d62:	05db      	lsls	r3, r3, #23
 8000d64:	4605      	mov	r5, r0
 8000d66:	460c      	mov	r4, r1
 8000d68:	4616      	mov	r6, r2
 8000d6a:	d505      	bpl.n	8000d78 <__swrite+0x1e>
 8000d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d70:	2302      	movs	r3, #2
 8000d72:	2200      	movs	r2, #0
 8000d74:	f000 f868 	bl	8000e48 <_lseek_r>
 8000d78:	89a3      	ldrh	r3, [r4, #12]
 8000d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d82:	81a3      	strh	r3, [r4, #12]
 8000d84:	4632      	mov	r2, r6
 8000d86:	463b      	mov	r3, r7
 8000d88:	4628      	mov	r0, r5
 8000d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d8e:	f000 b817 	b.w	8000dc0 <_write_r>

08000d92 <__sseek>:
 8000d92:	b510      	push	{r4, lr}
 8000d94:	460c      	mov	r4, r1
 8000d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d9a:	f000 f855 	bl	8000e48 <_lseek_r>
 8000d9e:	1c43      	adds	r3, r0, #1
 8000da0:	89a3      	ldrh	r3, [r4, #12]
 8000da2:	bf15      	itete	ne
 8000da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8000da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000dae:	81a3      	strheq	r3, [r4, #12]
 8000db0:	bf18      	it	ne
 8000db2:	81a3      	strhne	r3, [r4, #12]
 8000db4:	bd10      	pop	{r4, pc}

08000db6 <__sclose>:
 8000db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dba:	f000 b813 	b.w	8000de4 <_close_r>
	...

08000dc0 <_write_r>:
 8000dc0:	b538      	push	{r3, r4, r5, lr}
 8000dc2:	4d07      	ldr	r5, [pc, #28]	; (8000de0 <_write_r+0x20>)
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	4608      	mov	r0, r1
 8000dc8:	4611      	mov	r1, r2
 8000dca:	2200      	movs	r2, #0
 8000dcc:	602a      	str	r2, [r5, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	f7ff fac1 	bl	8000356 <_write>
 8000dd4:	1c43      	adds	r3, r0, #1
 8000dd6:	d102      	bne.n	8000dde <_write_r+0x1e>
 8000dd8:	682b      	ldr	r3, [r5, #0]
 8000dda:	b103      	cbz	r3, 8000dde <_write_r+0x1e>
 8000ddc:	6023      	str	r3, [r4, #0]
 8000dde:	bd38      	pop	{r3, r4, r5, pc}
 8000de0:	20000098 	.word	0x20000098

08000de4 <_close_r>:
 8000de4:	b538      	push	{r3, r4, r5, lr}
 8000de6:	4d06      	ldr	r5, [pc, #24]	; (8000e00 <_close_r+0x1c>)
 8000de8:	2300      	movs	r3, #0
 8000dea:	4604      	mov	r4, r0
 8000dec:	4608      	mov	r0, r1
 8000dee:	602b      	str	r3, [r5, #0]
 8000df0:	f7ff facd 	bl	800038e <_close>
 8000df4:	1c43      	adds	r3, r0, #1
 8000df6:	d102      	bne.n	8000dfe <_close_r+0x1a>
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	b103      	cbz	r3, 8000dfe <_close_r+0x1a>
 8000dfc:	6023      	str	r3, [r4, #0]
 8000dfe:	bd38      	pop	{r3, r4, r5, pc}
 8000e00:	20000098 	.word	0x20000098

08000e04 <_fstat_r>:
 8000e04:	b538      	push	{r3, r4, r5, lr}
 8000e06:	4d07      	ldr	r5, [pc, #28]	; (8000e24 <_fstat_r+0x20>)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	4611      	mov	r1, r2
 8000e10:	602b      	str	r3, [r5, #0]
 8000e12:	f7ff fac8 	bl	80003a6 <_fstat>
 8000e16:	1c43      	adds	r3, r0, #1
 8000e18:	d102      	bne.n	8000e20 <_fstat_r+0x1c>
 8000e1a:	682b      	ldr	r3, [r5, #0]
 8000e1c:	b103      	cbz	r3, 8000e20 <_fstat_r+0x1c>
 8000e1e:	6023      	str	r3, [r4, #0]
 8000e20:	bd38      	pop	{r3, r4, r5, pc}
 8000e22:	bf00      	nop
 8000e24:	20000098 	.word	0x20000098

08000e28 <_isatty_r>:
 8000e28:	b538      	push	{r3, r4, r5, lr}
 8000e2a:	4d06      	ldr	r5, [pc, #24]	; (8000e44 <_isatty_r+0x1c>)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4604      	mov	r4, r0
 8000e30:	4608      	mov	r0, r1
 8000e32:	602b      	str	r3, [r5, #0]
 8000e34:	f7ff fac7 	bl	80003c6 <_isatty>
 8000e38:	1c43      	adds	r3, r0, #1
 8000e3a:	d102      	bne.n	8000e42 <_isatty_r+0x1a>
 8000e3c:	682b      	ldr	r3, [r5, #0]
 8000e3e:	b103      	cbz	r3, 8000e42 <_isatty_r+0x1a>
 8000e40:	6023      	str	r3, [r4, #0]
 8000e42:	bd38      	pop	{r3, r4, r5, pc}
 8000e44:	20000098 	.word	0x20000098

08000e48 <_lseek_r>:
 8000e48:	b538      	push	{r3, r4, r5, lr}
 8000e4a:	4d07      	ldr	r5, [pc, #28]	; (8000e68 <_lseek_r+0x20>)
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	4608      	mov	r0, r1
 8000e50:	4611      	mov	r1, r2
 8000e52:	2200      	movs	r2, #0
 8000e54:	602a      	str	r2, [r5, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	f7ff fac0 	bl	80003dc <_lseek>
 8000e5c:	1c43      	adds	r3, r0, #1
 8000e5e:	d102      	bne.n	8000e66 <_lseek_r+0x1e>
 8000e60:	682b      	ldr	r3, [r5, #0]
 8000e62:	b103      	cbz	r3, 8000e66 <_lseek_r+0x1e>
 8000e64:	6023      	str	r3, [r4, #0]
 8000e66:	bd38      	pop	{r3, r4, r5, pc}
 8000e68:	20000098 	.word	0x20000098

08000e6c <__malloc_lock>:
 8000e6c:	4801      	ldr	r0, [pc, #4]	; (8000e74 <__malloc_lock+0x8>)
 8000e6e:	f7ff be43 	b.w	8000af8 <__retarget_lock_acquire_recursive>
 8000e72:	bf00      	nop
 8000e74:	20000090 	.word	0x20000090

08000e78 <__malloc_unlock>:
 8000e78:	4801      	ldr	r0, [pc, #4]	; (8000e80 <__malloc_unlock+0x8>)
 8000e7a:	f7ff be3e 	b.w	8000afa <__retarget_lock_release_recursive>
 8000e7e:	bf00      	nop
 8000e80:	20000090 	.word	0x20000090

08000e84 <_read_r>:
 8000e84:	b538      	push	{r3, r4, r5, lr}
 8000e86:	4d07      	ldr	r5, [pc, #28]	; (8000ea4 <_read_r+0x20>)
 8000e88:	4604      	mov	r4, r0
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	2200      	movs	r2, #0
 8000e90:	602a      	str	r2, [r5, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	f7ff fa42 	bl	800031c <_read>
 8000e98:	1c43      	adds	r3, r0, #1
 8000e9a:	d102      	bne.n	8000ea2 <_read_r+0x1e>
 8000e9c:	682b      	ldr	r3, [r5, #0]
 8000e9e:	b103      	cbz	r3, 8000ea2 <_read_r+0x1e>
 8000ea0:	6023      	str	r3, [r4, #0]
 8000ea2:	bd38      	pop	{r3, r4, r5, pc}
 8000ea4:	20000098 	.word	0x20000098

08000ea8 <_init>:
 8000ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eaa:	bf00      	nop
 8000eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eae:	bc08      	pop	{r3}
 8000eb0:	469e      	mov	lr, r3
 8000eb2:	4770      	bx	lr

08000eb4 <_fini>:
 8000eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb6:	bf00      	nop
 8000eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eba:	bc08      	pop	{r3}
 8000ebc:	469e      	mov	lr, r3
 8000ebe:	4770      	bx	lr
