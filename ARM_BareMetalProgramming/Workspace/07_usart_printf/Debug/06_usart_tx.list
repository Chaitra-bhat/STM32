
06_usart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  4 .ARM          00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003c8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000051a  00000000  00000000  000103f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000183  00000000  00000000  00010912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00010a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180be  00000000  00000000  00010b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005c7  00000000  00000000  00028c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008795b  00000000  00000000  000291d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b0b30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  000b0b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003a8 	.word	0x080003a8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003a8 	.word	0x080003a8

080001e8 <main>:
#define CR1_TE			(1U<<3)
#define CR1_UE			(1U<<13)
#define SR_TXE			(1U<<7)

int main()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0

	uart1_TX_init();
 80001ec:	f000 f804 	bl	80001f8 <uart1_TX_init>

	while(1)
	{
		uart1_write('Y');
 80001f0:	2059      	movs	r0, #89	; 0x59
 80001f2:	f000 f873 	bl	80002dc <uart1_write>
 80001f6:	e7fb      	b.n	80001f0 <main+0x8>

080001f8 <uart1_TX_init>:
	}
	return 0;
}

void uart1_TX_init()
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	//Enable clock for gpioa
	RCC->AHB1ENR |= GPIOA_ENABLE;
 80001fc:	4b20      	ldr	r3, [pc, #128]	; (8000280 <uart1_TX_init+0x88>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000200:	4a1f      	ldr	r2, [pc, #124]	; (8000280 <uart1_TX_init+0x88>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6313      	str	r3, [r2, #48]	; 0x30
	//Enable the alternate functionality
	GPIOA->MODER &= ~(1U<<18);
 8000208:	4b1e      	ldr	r3, [pc, #120]	; (8000284 <uart1_TX_init+0x8c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a1d      	ldr	r2, [pc, #116]	; (8000284 <uart1_TX_init+0x8c>)
 800020e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000212:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 8000214:	4b1b      	ldr	r3, [pc, #108]	; (8000284 <uart1_TX_init+0x8c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a1a      	ldr	r2, [pc, #104]	; (8000284 <uart1_TX_init+0x8c>)
 800021a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800021e:	6013      	str	r3, [r2, #0]

	//set alternate function type to Tx
	GPIOA->AFR[1] |= (1U<<4);
 8000220:	4b18      	ldr	r3, [pc, #96]	; (8000284 <uart1_TX_init+0x8c>)
 8000222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000224:	4a17      	ldr	r2, [pc, #92]	; (8000284 <uart1_TX_init+0x8c>)
 8000226:	f043 0310 	orr.w	r3, r3, #16
 800022a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<5);
 800022c:	4b15      	ldr	r3, [pc, #84]	; (8000284 <uart1_TX_init+0x8c>)
 800022e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000230:	4a14      	ldr	r2, [pc, #80]	; (8000284 <uart1_TX_init+0x8c>)
 8000232:	f043 0320 	orr.w	r3, r3, #32
 8000236:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<6);
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <uart1_TX_init+0x8c>)
 800023a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800023c:	4a11      	ldr	r2, [pc, #68]	; (8000284 <uart1_TX_init+0x8c>)
 800023e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000242:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<7);
 8000244:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <uart1_TX_init+0x8c>)
 8000246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000248:	4a0e      	ldr	r2, [pc, #56]	; (8000284 <uart1_TX_init+0x8c>)
 800024a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800024e:	6253      	str	r3, [r2, #36]	; 0x24

	//enable usart2 clock
	RCC->APB2ENR |= USART1_EN;
 8000250:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <uart1_TX_init+0x88>)
 8000252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000254:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <uart1_TX_init+0x88>)
 8000256:	f043 0310 	orr.w	r3, r3, #16
 800025a:	6453      	str	r3, [r2, #68]	; 0x44

	//baudrate
	uart_set_baudrate(USART1, APB1_CLK, UART_BAUDRATE);
 800025c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000260:	4909      	ldr	r1, [pc, #36]	; (8000288 <uart1_TX_init+0x90>)
 8000262:	480a      	ldr	r0, [pc, #40]	; (800028c <uart1_TX_init+0x94>)
 8000264:	f000 f814 	bl	8000290 <uart_set_baudrate>

	//transfer direction
	USART1->CR1 = CR1_TE;
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <uart1_TX_init+0x94>)
 800026a:	2208      	movs	r2, #8
 800026c:	60da      	str	r2, [r3, #12]

	//enable usart2 module
	USART1->CR1 |= CR1_UE;
 800026e:	4b07      	ldr	r3, [pc, #28]	; (800028c <uart1_TX_init+0x94>)
 8000270:	68db      	ldr	r3, [r3, #12]
 8000272:	4a06      	ldr	r2, [pc, #24]	; (800028c <uart1_TX_init+0x94>)
 8000274:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000278:	60d3      	str	r3, [r2, #12]
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40023800 	.word	0x40023800
 8000284:	40020000 	.word	0x40020000
 8000288:	00f42400 	.word	0x00f42400
 800028c:	40011000 	.word	0x40011000

08000290 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t baudrate)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, baudrate);
 800029c:	6879      	ldr	r1, [r7, #4]
 800029e:	68b8      	ldr	r0, [r7, #8]
 80002a0:	f000 f808 	bl	80002b4 <compute_uart_bd>
 80002a4:	4603      	mov	r3, r0
 80002a6:	461a      	mov	r2, r3
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	609a      	str	r2, [r3, #8]
}
 80002ac:	bf00      	nop
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t baudrate)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]

	return ((PeriphClk + (baudrate/2U))/baudrate);
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	085a      	lsrs	r2, r3, #1
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	441a      	add	r2, r3
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	b29b      	uxth	r3, r3
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <uart1_write>:

void uart1_write(int ch)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	while(!(USART1->SR & SR_TXE)){}
 80002e4:	bf00      	nop
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <uart1_write+0x2c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0f9      	beq.n	80002e6 <uart1_write+0xa>
	//Initially transmit data register should be empty
	USART1->DR = (ch & 0xFF);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <uart1_write+0x2c>)
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	6053      	str	r3, [r2, #4]
	//write to transmit data register
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40011000 	.word	0x40011000

0800030c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000310:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <LoopForever+0x6>)
  ldr r1, =_edata
 8000316:	490d      	ldr	r1, [pc, #52]	; (800034c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000318:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <LoopForever+0xe>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800032c:	4c0a      	ldr	r4, [pc, #40]	; (8000358 <LoopForever+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033a:	f000 f811 	bl	8000360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033e:	f7ff ff53 	bl	80001e8 <main>

08000342 <LoopForever>:

LoopForever:
    b LoopForever
 8000342:	e7fe      	b.n	8000342 <LoopForever>
  ldr   r0, =_estack
 8000344:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000350:	080003c8 	.word	0x080003c8
  ldr r2, =_sbss
 8000354:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000358:	2000001c 	.word	0x2000001c

0800035c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC_IRQHandler>
	...

08000360 <__libc_init_array>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	4d0d      	ldr	r5, [pc, #52]	; (8000398 <__libc_init_array+0x38>)
 8000364:	4c0d      	ldr	r4, [pc, #52]	; (800039c <__libc_init_array+0x3c>)
 8000366:	1b64      	subs	r4, r4, r5
 8000368:	10a4      	asrs	r4, r4, #2
 800036a:	2600      	movs	r6, #0
 800036c:	42a6      	cmp	r6, r4
 800036e:	d109      	bne.n	8000384 <__libc_init_array+0x24>
 8000370:	4d0b      	ldr	r5, [pc, #44]	; (80003a0 <__libc_init_array+0x40>)
 8000372:	4c0c      	ldr	r4, [pc, #48]	; (80003a4 <__libc_init_array+0x44>)
 8000374:	f000 f818 	bl	80003a8 <_init>
 8000378:	1b64      	subs	r4, r4, r5
 800037a:	10a4      	asrs	r4, r4, #2
 800037c:	2600      	movs	r6, #0
 800037e:	42a6      	cmp	r6, r4
 8000380:	d105      	bne.n	800038e <__libc_init_array+0x2e>
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f855 3b04 	ldr.w	r3, [r5], #4
 8000388:	4798      	blx	r3
 800038a:	3601      	adds	r6, #1
 800038c:	e7ee      	b.n	800036c <__libc_init_array+0xc>
 800038e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000392:	4798      	blx	r3
 8000394:	3601      	adds	r6, #1
 8000396:	e7f2      	b.n	800037e <__libc_init_array+0x1e>
 8000398:	080003c0 	.word	0x080003c0
 800039c:	080003c0 	.word	0x080003c0
 80003a0:	080003c0 	.word	0x080003c0
 80003a4:	080003c4 	.word	0x080003c4

080003a8 <_init>:
 80003a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003aa:	bf00      	nop
 80003ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ae:	bc08      	pop	{r3}
 80003b0:	469e      	mov	lr, r3
 80003b2:	4770      	bx	lr

080003b4 <_fini>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr
